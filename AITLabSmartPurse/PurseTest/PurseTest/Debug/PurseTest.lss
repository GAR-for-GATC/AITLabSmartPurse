
PurseTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  0000128e  00001322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000128e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000436  0080013c  0080013c  0000135e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000135e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002b0  00000000  00000000  0000138e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004849  00000000  00000000  0000163e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000df2  00000000  00000000  00005e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012af  00000000  00000000  00006c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007cc  00000000  00000000  00007f28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000af5  00000000  00000000  000086f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002773  00000000  00000000  000091e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c8  00000000  00000000  0000b95c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
       4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      14:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__vector_5>
      18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      48:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__vector_18>
      4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      68:	8d 03       	fmulsu	r16, r21
      6a:	80 03       	fmuls	r16, r16
      6c:	9d 03       	fmulsu	r17, r21
      6e:	6f 03       	fmul	r22, r23
      70:	c3 02       	muls	r28, r19
      72:	d0 02       	muls	r29, r16
      74:	e1 02       	muls	r30, r17
      76:	f2 02       	muls	r31, r18
      78:	08 03       	fmul	r16, r16
      7a:	20 03       	mulsu	r18, r16
      7c:	3c 03       	fmul	r19, r20
      7e:	4d 03       	fmul	r20, r21
      80:	5e 03       	fmul	r21, r22

00000082 <__ctors_end>:
      82:	11 24       	eor	r1, r1
      84:	1f be       	out	0x3f, r1	; 63
      86:	cf ef       	ldi	r28, 0xFF	; 255
      88:	d8 e0       	ldi	r29, 0x08	; 8
      8a:	de bf       	out	0x3e, r29	; 62
      8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
      8e:	11 e0       	ldi	r17, 0x01	; 1
      90:	a0 e0       	ldi	r26, 0x00	; 0
      92:	b1 e0       	ldi	r27, 0x01	; 1
      94:	ee e8       	ldi	r30, 0x8E	; 142
      96:	f2 e1       	ldi	r31, 0x12	; 18
      98:	02 c0       	rjmp	.+4      	; 0x9e <__do_copy_data+0x10>
      9a:	05 90       	lpm	r0, Z+
      9c:	0d 92       	st	X+, r0
      9e:	ac 33       	cpi	r26, 0x3C	; 60
      a0:	b1 07       	cpc	r27, r17
      a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0xc>

000000a4 <__do_clear_bss>:
      a4:	25 e0       	ldi	r18, 0x05	; 5
      a6:	ac e3       	ldi	r26, 0x3C	; 60
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
      ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
      ae:	a2 37       	cpi	r26, 0x72	; 114
      b0:	b2 07       	cpc	r27, r18
      b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
      b4:	0e 94 02 05 	call	0xa04	; 0xa04 <main>
      b8:	0c 94 45 09 	jmp	0x128a	; 0x128a <_exit>

000000bc <__bad_interrupt>:
      bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <bluetoothModuleInit>:
	//set TX pin (PD1) to output
	//set RX pin (PD0) to input.
	//DDRD |= (1<<PD1);
	//DDRD &= ~(1<<PD0);
	//PORTD |=(1<<PORTD0); //enable 10k pullup on input.
	Init_USART();
      c0:	0e 94 7c 07 	call	0xef8	; 0xef8 <Init_USART>
      c4:	08 95       	ret

000000c6 <bluetoothModuleEnableInterrupt>:
//http://ebook.pldworld.com/_Semiconductors/Atmel/Databook%20CDROM/Atmel/acrobat/doc1451.pdf
void bluetoothModuleEnableInterrupt(){
	//enable interrupts on PD0 (PCINT16/RXD)
	//PCICR |= (1<<PCIE2); //enable interrupts on PCINT[23 to 16]
	//PCMSK2 |= (1<<PCINT16); //enable interrupts on PCINT16
	UCSR0B |= (1<<RXCIE0);	//enable interrupts for receive port
      c6:	e1 ec       	ldi	r30, 0xC1	; 193
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	80 81       	ld	r24, Z
      cc:	80 68       	ori	r24, 0x80	; 128
      ce:	80 83       	st	Z, r24
	sei(); //enables global interrupts
      d0:	78 94       	sei
      d2:	08 95       	ret

000000d4 <twiInit>:

#include "include.h"

void twiInit(void){
	//set SCL to 400khz
	TWSR = 0x00;	//This is the status register.  Sets prescaler value to 1 and clears the
      d4:	10 92 b9 00 	sts	0x00B9, r1
					// status register.  The status register does stuff, but the datasheet isnt
					// specific.
	TWBR = 0x0C;	//This is the bit rate register and sets the division factor for the bit rate
      d8:	8c e0       	ldi	r24, 0x0C	; 12
      da:	80 93 b8 00 	sts	0x00B8, r24
					//	SCL frequency = clock frequency (16Mhz) / 16 + ((2*TWBR)*(prescale value))
					// 16mill / 16 + ((2*12)*1) = 16mill/40 = 400,000kHz
					// try 100,000khz, 16mill/x = 100,000. x = 160.  160 = 16 + (2*x)*y, same as y*x = 72.
					//x = 72.  0100 1000, 0x48
	//Enable twi
	TWCR = (1<<TWEN);	// When bit2 (TWEN) is on, TWI is enabled.
      de:	84 e0       	ldi	r24, 0x04	; 4
      e0:	80 93 bc 00 	sts	0x00BC, r24
      e4:	08 95       	ret

000000e6 <twiStart>:
}

//generates start signal, waits for acknowledge
void twiStart(void){
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);	//Interrupt bit (TWINT) needs to be set to send start, as
      e6:	84 ea       	ldi	r24, 0xA4	; 164
      e8:	80 93 bc 00 	sts	0x00BC, r24
											// well as a slew of others.  TWSTA set to one generates
											// a start at the first convenience.
	while((TWCR & (1<<TWINT)) == 0);	//The TWINT bit is set after the TWI has finished its current job,
      ec:	ec eb       	ldi	r30, 0xBC	; 188
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	80 81       	ld	r24, Z
      f2:	88 23       	and	r24, r24
      f4:	ec f7       	brge	.-6      	; 0xf0 <twiStart+0xa>
										// in this case, sending a start condition.
}
      f6:	08 95       	ret

000000f8 <twiStop>:
//generates stop signal
void twiStop(void){
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN); //TWSTO to 1 generates a stop signal.
      f8:	84 e9       	ldi	r24, 0x94	; 148
      fa:	80 93 bc 00 	sts	0x00BC, r24
      fe:	08 95       	ret

00000100 <twiWrite>:
}

//writes to the TWDR register, which is shifted to the SDA line
void twiWrite(uint8_t u8data){
	TWDR = u8data; //holds the next byte to be transmitted.
     100:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN); //sends byte, datasheet isnt clear how this sends the byte.
     104:	84 e8       	ldi	r24, 0x84	; 132
     106:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0); //wait until ack signal, when TWINT is set to 1.
     10a:	ec eb       	ldi	r30, 0xBC	; 188
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	88 23       	and	r24, r24
     112:	ec f7       	brge	.-6      	; 0x10e <twiWrite+0xe>
}
     114:	08 95       	ret

00000116 <rgbLEDInit>:

#include "include.h"

//give the function a pointer to a rgbLEDs struct and
//the number of LEDs in the chain of LEDs
uint8_t rgbLEDInit(rgbLEDs* myLEDs, uint16_t n){
     116:	fc 01       	movw	r30, r24
	
	
	DDRD |= (1<<DDD4);	//set PD4 as an output.
     118:	54 9a       	sbi	0x0a, 4	; 10
	PORTD &= ~(1<<PD4);	//set output to low.
     11a:	5c 98       	cbi	0x0b, 4	; 11
	
	myLEDs->brightness = 0;
     11c:	15 82       	std	Z+5, r1	; 0x05
	myLEDs->endTime=0;
     11e:	16 a6       	std	Z+46, r1	; 0x2e
     120:	17 a6       	std	Z+47, r1	; 0x2f
     122:	10 aa       	std	Z+48, r1	; 0x30
     124:	11 aa       	std	Z+49, r1	; 0x31
	
	uint8_t t = NEO_GRB + NEO_KHZ800;
	myLEDs -> wOffset = (t >> 6) & 0b11; // See notes in header file
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	85 a7       	std	Z+45, r24	; 0x2d
	myLEDs -> rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
     12a:	82 a7       	std	Z+42, r24	; 0x2a
	myLEDs -> gOffset = (t >> 2) & 0b11;
     12c:	13 a6       	std	Z+43, r1	; 0x2b
	myLEDs -> bOffset =  t       & 0b11;
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	84 a7       	std	Z+44, r24	; 0x2c
	
	//use this to find the number of bytes long the "pixels" buffer needs to be.
	//with the 12 LED ring light, it's 36
	myLEDs -> numBytes = n * ((myLEDs -> wOffset == myLEDs -> rOffset) ? 3 : 4);
     132:	cb 01       	movw	r24, r22
     134:	88 0f       	add	r24, r24
     136:	99 1f       	adc	r25, r25
     138:	86 0f       	add	r24, r22
     13a:	97 1f       	adc	r25, r23
     13c:	82 83       	std	Z+2, r24	; 0x02
     13e:	93 83       	std	Z+3, r25	; 0x03
     140:	24 e2       	ldi	r18, 0x24	; 36
     142:	21 50       	subi	r18, 0x01	; 1
	
	for(uint8_t i=0; i<sizeof(myLEDs->pixels); i++){
     144:	f1 f7       	brne	.-4      	; 0x142 <rgbLEDInit+0x2c>
	
	//port    = portOutputRegister(digitalPinToPort(p));
	myLEDs->port = (&PORTD);
	
	
}
     146:	08 95       	ret

00000148 <rgbLEDshow>:

void rgbLEDshow(uint16_t numBytes, uint8_t* pixels, uint8_t pinMask){
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
     150:	27 97       	sbiw	r28, 0x07	; 7
     152:	0f b6       	in	r0, 0x3f	; 63
     154:	f8 94       	cli
     156:	de bf       	out	0x3e, r29	; 62
     158:	0f be       	out	0x3f, r0	; 63
     15a:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15c:	a7 ee       	ldi	r26, 0xE7	; 231
     15e:	b3 e0       	ldi	r27, 0x03	; 3
     160:	11 97       	sbiw	r26, 0x01	; 1
     162:	f1 f7       	brne	.-4      	; 0x160 <rgbLEDshow+0x18>
     164:	00 c0       	rjmp	.+0      	; 0x166 <rgbLEDshow+0x1e>
     166:	00 00       	nop
	//apparently this refreshes the LEDs
	
	
	_delay_us(500);
	
	volatile uint8_t n1, n2 = 0;  // First, next bits out
     168:	1a 82       	std	Y+2, r1	; 0x02
	// OUT instructions:              ^ ^    ^   (T=0,2,7)

	// PORTD OUTPUT ----------------------------------------------------
	
	volatile uint16_t
	i   = numBytes; // Loop counter
     16a:	9c 83       	std	Y+4, r25	; 0x04
     16c:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t
	*ptr = pixels,   // Pointer to next byte
	b   = *ptr++,   // Current byte value
     16e:	fb 01       	movw	r30, r22
     170:	31 96       	adiw	r30, 0x01	; 1
     172:	db 01       	movw	r26, r22
     174:	8c 91       	ld	r24, X
     176:	8d 83       	std	Y+5, r24	; 0x05
	// on the datasheet figures and have not been extensively tested outside
	// the canonical 8/12/16 MHz speeds; there's no guarantee these will work
	// close to the extremes (or possibly they could be pushed further).
	// Keep in mind only one CPU speed case actually gets compiled; the
	// resulting program isn't as massive as it might look from source here.
	hi = PORTD |  pinMask;
     178:	8b b1       	in	r24, 0x0b	; 11
     17a:	84 2b       	or	r24, r20
     17c:	8e 83       	std	Y+6, r24	; 0x06
	lo = PORTD & ~pinMask;
     17e:	8b b1       	in	r24, 0x0b	; 11
     180:	40 95       	com	r20
     182:	48 23       	and	r20, r24
     184:	4f 83       	std	Y+7, r20	; 0x07
	n1 = lo;
     186:	8f 81       	ldd	r24, Y+7	; 0x07
     188:	89 83       	std	Y+1, r24	; 0x01
	if(b & 0x80) n1 = hi;
     18a:	8d 81       	ldd	r24, Y+5	; 0x05
     18c:	88 23       	and	r24, r24
     18e:	14 f4       	brge	.+4      	; 0x194 <rgbLEDshow+0x4c>
     190:	8e 81       	ldd	r24, Y+6	; 0x06
     192:	89 83       	std	Y+1, r24	; 0x01
	// to delay two clock cycles in one instruction word (rather than
	// using two NOPs). This was necessary in order to squeeze the
	// loop down to exactly 64 words -- the maximum possible for a
	// relative branch.

	asm volatile(
     194:	5e 81       	ldd	r21, Y+6	; 0x06
     196:	6f 81       	ldd	r22, Y+7	; 0x07
     198:	4d 81       	ldd	r20, Y+5	; 0x05
     19a:	39 81       	ldd	r19, Y+1	; 0x01
     19c:	2a 81       	ldd	r18, Y+2	; 0x02
     19e:	8b 81       	ldd	r24, Y+3	; 0x03
     1a0:	9c 81       	ldd	r25, Y+4	; 0x04

000001a2 <headD>:
     1a2:	5b b9       	out	0x0b, r21	; 11
     1a4:	26 2f       	mov	r18, r22
     1a6:	3b b9       	out	0x0b, r19	; 11
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <headD+0x8>
     1aa:	46 fd       	sbrc	r20, 6
     1ac:	25 2f       	mov	r18, r21
     1ae:	6b b9       	out	0x0b, r22	; 11
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <headD+0x10>
     1b2:	5b b9       	out	0x0b, r21	; 11
     1b4:	36 2f       	mov	r19, r22
     1b6:	2b b9       	out	0x0b, r18	; 11
     1b8:	00 c0       	rjmp	.+0      	; 0x1ba <headD+0x18>
     1ba:	45 fd       	sbrc	r20, 5
     1bc:	35 2f       	mov	r19, r21
     1be:	6b b9       	out	0x0b, r22	; 11
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <headD+0x20>
     1c2:	5b b9       	out	0x0b, r21	; 11
     1c4:	26 2f       	mov	r18, r22
     1c6:	3b b9       	out	0x0b, r19	; 11
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <headD+0x28>
     1ca:	44 fd       	sbrc	r20, 4
     1cc:	25 2f       	mov	r18, r21
     1ce:	6b b9       	out	0x0b, r22	; 11
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <headD+0x30>
     1d2:	5b b9       	out	0x0b, r21	; 11
     1d4:	36 2f       	mov	r19, r22
     1d6:	2b b9       	out	0x0b, r18	; 11
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <headD+0x38>
     1da:	43 fd       	sbrc	r20, 3
     1dc:	35 2f       	mov	r19, r21
     1de:	6b b9       	out	0x0b, r22	; 11
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <headD+0x40>
     1e2:	5b b9       	out	0x0b, r21	; 11
     1e4:	26 2f       	mov	r18, r22
     1e6:	3b b9       	out	0x0b, r19	; 11
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <headD+0x48>
     1ea:	42 fd       	sbrc	r20, 2
     1ec:	25 2f       	mov	r18, r21
     1ee:	6b b9       	out	0x0b, r22	; 11
     1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <headD+0x50>
     1f2:	5b b9       	out	0x0b, r21	; 11
     1f4:	36 2f       	mov	r19, r22
     1f6:	2b b9       	out	0x0b, r18	; 11
     1f8:	00 c0       	rjmp	.+0      	; 0x1fa <headD+0x58>
     1fa:	41 fd       	sbrc	r20, 1
     1fc:	35 2f       	mov	r19, r21
     1fe:	6b b9       	out	0x0b, r22	; 11
     200:	00 c0       	rjmp	.+0      	; 0x202 <headD+0x60>
     202:	5b b9       	out	0x0b, r21	; 11
     204:	26 2f       	mov	r18, r22
     206:	3b b9       	out	0x0b, r19	; 11
     208:	00 c0       	rjmp	.+0      	; 0x20a <headD+0x68>
     20a:	40 fd       	sbrc	r20, 0
     20c:	25 2f       	mov	r18, r21
     20e:	6b b9       	out	0x0b, r22	; 11
     210:	01 97       	sbiw	r24, 0x01	; 1
     212:	5b b9       	out	0x0b, r21	; 11
     214:	36 2f       	mov	r19, r22
     216:	2b b9       	out	0x0b, r18	; 11
     218:	41 91       	ld	r20, Z+
     21a:	47 fd       	sbrc	r20, 7
     21c:	35 2f       	mov	r19, r21
     21e:	6b b9       	out	0x0b, r22	; 11
     220:	01 f6       	brne	.-128    	; 0x1a2 <headD>
     222:	4d 83       	std	Y+5, r20	; 0x05
     224:	39 83       	std	Y+1, r19	; 0x01
     226:	2a 83       	std	Y+2, r18	; 0x02
     228:	9c 83       	std	Y+4, r25	; 0x04
     22a:	8b 83       	std	Y+3, r24	; 0x03
     22c:	e7 ee       	ldi	r30, 0xE7	; 231
     22e:	f3 e0       	ldi	r31, 0x03	; 3
     230:	31 97       	sbiw	r30, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <headD+0x8e>
     234:	00 c0       	rjmp	.+0      	; 0x236 <headD+0x94>
     236:	00 00       	nop
	[ptr]    "e" (ptr),
	[hi]     "r" (hi),
	[lo]     "r" (lo));
	
	_delay_us(500);
}
     238:	27 96       	adiw	r28, 0x07	; 7
     23a:	0f b6       	in	r0, 0x3f	; 63
     23c:	f8 94       	cli
     23e:	de bf       	out	0x3e, r29	; 62
     240:	0f be       	out	0x3f, r0	; 63
     242:	cd bf       	out	0x3d, r28	; 61
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <setBrightness>:

void setBrightness(uint8_t b,rgbLEDs* myLEDs) {
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	eb 01       	movw	r28, r22
	// This simplifies the actual scaling math later, allowing a fast
	// 8x8-bit multiply and taking the MSB. 'brightness' is a uint8_t,
	// adding 1 here may (intentionally) roll over...so 0 = max brightness
	// (color values are interpreted literally; no scaling), 1 = min
	// brightness (off), 255 = just below max brightness.
	uint8_t newBrightness = b + 1;
     256:	ff 24       	eor	r15, r15
     258:	f3 94       	inc	r15
     25a:	f8 0e       	add	r15, r24
	if(newBrightness != myLEDs->brightness) { // Compare against prior value
     25c:	2d 81       	ldd	r18, Y+5	; 0x05
     25e:	2f 15       	cp	r18, r15
     260:	99 f1       	breq	.+102    	; 0x2c8 <setBrightness+0x7e>
		// brightness level). If there's a significant step up in brightness,
		// the limited number of steps (quantization) in the old data will be
		// quite visible in the re-scaled version. For a non-destructive
		// change, you'll need to re-render the full strip data. C'est la vie.
		uint8_t  c,
		*ptr = myLEDs->pixels,
     262:	8b 01       	movw	r16, r22
     264:	0a 5f       	subi	r16, 0xFA	; 250
     266:	1f 4f       	sbci	r17, 0xFF	; 255
		oldBrightness = myLEDs->brightness - 1; // De-wrap old brightness value
     268:	21 50       	subi	r18, 0x01	; 1
		uint16_t scale;
		if(oldBrightness == 0) scale = 0; // Avoid /0
     26a:	b9 f0       	breq	.+46     	; 0x29a <setBrightness+0x50>
		else if(b == 255) scale = 65535 / oldBrightness;
     26c:	8f 3f       	cpi	r24, 0xFF	; 255
     26e:	51 f4       	brne	.+20     	; 0x284 <setBrightness+0x3a>
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	6f ef       	ldi	r22, 0xFF	; 255
     278:	7f ef       	ldi	r23, 0xFF	; 255
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 19 09 	call	0x1232	; 0x1232 <__divmodsi4>
     282:	0d c0       	rjmp	.+26     	; 0x29e <setBrightness+0x54>
		else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
     284:	8f 2d       	mov	r24, r15
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	98 2f       	mov	r25, r24
     28a:	88 27       	eor	r24, r24
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	62 2f       	mov	r22, r18
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__udivmodhi4>
     296:	9b 01       	movw	r18, r22
     298:	02 c0       	rjmp	.+4      	; 0x29e <setBrightness+0x54>
		// change, you'll need to re-render the full strip data. C'est la vie.
		uint8_t  c,
		*ptr = myLEDs->pixels,
		oldBrightness = myLEDs->brightness - 1; // De-wrap old brightness value
		uint16_t scale;
		if(oldBrightness == 0) scale = 0; // Avoid /0
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
		else if(b == 255) scale = 65535 / oldBrightness;
		else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
		for(uint16_t i=0; i<myLEDs->numBytes; i++) {
     29e:	8a 81       	ldd	r24, Y+2	; 0x02
     2a0:	9b 81       	ldd	r25, Y+3	; 0x03
     2a2:	89 2b       	or	r24, r25
     2a4:	81 f0       	breq	.+32     	; 0x2c6 <setBrightness+0x7c>
     2a6:	f8 01       	movw	r30, r16
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	90 e0       	ldi	r25, 0x00	; 0
			c = *ptr;
			*ptr++ = (c * scale) >> 8;
     2ac:	60 81       	ld	r22, Z
     2ae:	62 9f       	mul	r22, r18
     2b0:	a0 01       	movw	r20, r0
     2b2:	63 9f       	mul	r22, r19
     2b4:	50 0d       	add	r21, r0
     2b6:	11 24       	eor	r1, r1
     2b8:	51 93       	st	Z+, r21
		oldBrightness = myLEDs->brightness - 1; // De-wrap old brightness value
		uint16_t scale;
		if(oldBrightness == 0) scale = 0; // Avoid /0
		else if(b == 255) scale = 65535 / oldBrightness;
		else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
		for(uint16_t i=0; i<myLEDs->numBytes; i++) {
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	4a 81       	ldd	r20, Y+2	; 0x02
     2be:	5b 81       	ldd	r21, Y+3	; 0x03
     2c0:	84 17       	cp	r24, r20
     2c2:	95 07       	cpc	r25, r21
     2c4:	98 f3       	brcs	.-26     	; 0x2ac <setBrightness+0x62>
			c = *ptr;
			*ptr++ = (c * scale) >> 8;
		}
		myLEDs->brightness = newBrightness;
     2c6:	fd 82       	std	Y+5, r15	; 0x05
	}
}
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	ff 90       	pop	r15
     2d2:	08 95       	ret

000002d4 <setPixelColor>:

void setPixelColor(uint16_t n, uint8_t r, uint8_t g, uint8_t b, rgbLEDs* myLEDs) {
     2d4:	0f 93       	push	r16
     2d6:	1f 93       	push	r17
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	f8 01       	movw	r30, r16

	if(n < myLEDs->numLEDs) {
     2de:	a0 81       	ld	r26, Z
     2e0:	b1 81       	ldd	r27, Z+1	; 0x01
     2e2:	8a 17       	cp	r24, r26
     2e4:	9b 07       	cpc	r25, r27
     2e6:	e8 f5       	brcc	.+122    	; 0x362 <setPixelColor+0x8e>
		if(myLEDs->brightness) { // See notes in setBrightness()
     2e8:	a5 81       	ldd	r26, Z+5	; 0x05
     2ea:	aa 23       	and	r26, r26
     2ec:	99 f0       	breq	.+38     	; 0x314 <setPixelColor+0x40>
			r = (r * myLEDs->brightness) >> 8;
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	6a 9f       	mul	r22, r26
     2f2:	e0 01       	movw	r28, r0
     2f4:	6b 9f       	mul	r22, r27
     2f6:	d0 0d       	add	r29, r0
     2f8:	11 24       	eor	r1, r1
     2fa:	6d 2f       	mov	r22, r29
			g = (g * myLEDs->brightness) >> 8;
     2fc:	4a 9f       	mul	r20, r26
     2fe:	e0 01       	movw	r28, r0
     300:	4b 9f       	mul	r20, r27
     302:	d0 0d       	add	r29, r0
     304:	11 24       	eor	r1, r1
     306:	4d 2f       	mov	r20, r29
			b = (b * myLEDs->brightness) >> 8;
     308:	2a 9f       	mul	r18, r26
     30a:	e0 01       	movw	r28, r0
     30c:	2b 9f       	mul	r18, r27
     30e:	d0 0d       	add	r29, r0
     310:	11 24       	eor	r1, r1
     312:	2d 2f       	mov	r18, r29
		}
		uint8_t *p;
		if(myLEDs->wOffset == myLEDs->rOffset) { // Is an RGB-type strip
     314:	35 a5       	ldd	r19, Z+45	; 0x2d
     316:	52 a5       	ldd	r21, Z+42	; 0x2a
     318:	35 13       	cpse	r19, r21
     31a:	09 c0       	rjmp	.+18     	; 0x32e <setPixelColor+0x5a>
			p = &(myLEDs->pixels[n * 3]);    // 3 bytes per pixel
     31c:	dc 01       	movw	r26, r24
     31e:	aa 0f       	add	r26, r26
     320:	bb 1f       	adc	r27, r27
     322:	8a 0f       	add	r24, r26
     324:	9b 1f       	adc	r25, r27
     326:	06 96       	adiw	r24, 0x06	; 6
     328:	8e 0f       	add	r24, r30
     32a:	9f 1f       	adc	r25, r31
     32c:	0b c0       	rjmp	.+22     	; 0x344 <setPixelColor+0x70>
			} else {                 // Is a WRGB-type strip
			p = &(myLEDs->pixels[n * 4]);    // 4 bytes per pixel
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	06 96       	adiw	r24, 0x06	; 6
     338:	8e 0f       	add	r24, r30
     33a:	9f 1f       	adc	r25, r31
			p[myLEDs->wOffset] = 0;        // But only R,G,B passed -- set W to 0
     33c:	dc 01       	movw	r26, r24
     33e:	a3 0f       	add	r26, r19
     340:	b1 1d       	adc	r27, r1
     342:	1c 92       	st	X, r1
		}
		p[myLEDs->rOffset] = r;          // R,G,B always stored
     344:	32 a5       	ldd	r19, Z+42	; 0x2a
     346:	dc 01       	movw	r26, r24
     348:	a3 0f       	add	r26, r19
     34a:	b1 1d       	adc	r27, r1
     34c:	6c 93       	st	X, r22
		p[myLEDs->gOffset] = g;
     34e:	33 a5       	ldd	r19, Z+43	; 0x2b
     350:	dc 01       	movw	r26, r24
     352:	a3 0f       	add	r26, r19
     354:	b1 1d       	adc	r27, r1
     356:	4c 93       	st	X, r20
		p[myLEDs->bOffset] = b;
     358:	34 a5       	ldd	r19, Z+44	; 0x2c
     35a:	fc 01       	movw	r30, r24
     35c:	e3 0f       	add	r30, r19
     35e:	f1 1d       	adc	r31, r1
     360:	20 83       	st	Z, r18
	}
}
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	08 95       	ret

0000036c <ssd1306_command>:
/*
static uint8_t iheartevee[] = 
	space + space + capI + space + lessThan + space + three + space + capE + space + 
	lowerv + space + lowere + space + lowere;
*/
void ssd1306_command(uint8_t c){
     36c:	cf 93       	push	r28
     36e:	c8 2f       	mov	r28, r24
	//Wire.beginTransmission(_i2caddr);
	//Wire.write(control);
	//Wire.write(c);
	//Wire.endTransmission();
	
	twiStart();
     370:	0e 94 73 00 	call	0xe6	; 0xe6 <twiStart>
	//if(twiGetStatus() != 0x18){
		//return error.
	//}
	twiWrite(address); //send address, '0111100' and add a '0' for write.
     374:	88 e7       	ldi	r24, 0x78	; 120
     376:	0e 94 80 00 	call	0x100	; 0x100 <twiWrite>
						// '0011 1100', or 0x3C
	twiWrite(0x00);					
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	0e 94 80 00 	call	0x100	; 0x100 <twiWrite>
	twiWrite(c);
     380:	8c 2f       	mov	r24, r28
     382:	0e 94 80 00 	call	0x100	; 0x100 <twiWrite>
	twiStop();
     386:	0e 94 7c 00 	call	0xf8	; 0xf8 <twiStop>
};
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <initDisplay>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     38e:	8f e6       	ldi	r24, 0x6F	; 111
     390:	97 e1       	ldi	r25, 0x17	; 23
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <initDisplay+0x4>
     396:	00 c0       	rjmp	.+0      	; 0x398 <initDisplay+0xa>
     398:	00 00       	nop
     39a:	8f e2       	ldi	r24, 0x2F	; 47
     39c:	95 e7       	ldi	r25, 0x75	; 117
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <initDisplay+0x10>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <initDisplay+0x16>
     3a4:	00 00       	nop
	//Rest for 15ms
	_delay_ms(15);
	
	
	// Init sequence
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
     3a6:	8e ea       	ldi	r24, 0xAE	; 174
     3a8:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5, 1101 0101 
     3ac:	85 ed       	ldi	r24, 0xD5	; 213
     3ae:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	ssd1306_command(0x80);                                  // the suggested ratio 0x80 //set mux ratio?
     3b2:	80 e8       	ldi	r24, 0x80	; 128
     3b4:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>

	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8// this is the mux ratio
     3b8:	88 ea       	ldi	r24, 0xA8	; 168
     3ba:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	ssd1306_command(SSD1306_LCDHEIGHT - 1);
     3be:	8f e3       	ldi	r24, 0x3F	; 63
     3c0:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>

	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3 //this is default offset, vertical shift
     3c4:	83 ed       	ldi	r24, 0xD3	; 211
     3c6:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	ssd1306_command(0x0);                                   // no offset
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0 //display line start register.
     3d0:	80 e4       	ldi	r24, 0x40	; 64
     3d2:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D //next command enables/disables charge pump.
     3d6:	8d e8       	ldi	r24, 0x8D	; 141
     3d8:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	//if (vccstate == SSD1306_EXTERNALVCC)
	//{ ssd1306_command(0x10); }
	//else
	{ ssd1306_command(0x14); }								//enable charge pump.
     3dc:	84 e1       	ldi	r24, 0x14	; 20
     3de:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
															//charge pump is a dc/dc voltage converter.  very efficient.
															//creates 7.5V to the oled driver block.
															
	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20 //3 memory address schemes.  currently in
     3e2:	80 e2       	ldi	r24, 0x20	; 32
     3e4:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
															//Page Addressing Mode.
															
	ssd1306_command(0x00);                                  // 0x0 act like ks0108??
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	ssd1306_command(SSD1306_SEGREMAP | 0x1);				// 0xA0 | 0x01, column address 127 mapped to SEG0.
     3ee:	81 ea       	ldi	r24, 0xA1	; 161
     3f0:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	ssd1306_command(SSD1306_COMSCANDEC);					//0xC8, set scan direction to remap mode.
     3f4:	88 ec       	ldi	r24, 0xC8	; 200
     3f6:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	ssd1306_command(0x02);
	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
	ssd1306_command(0x8F);

	#elif defined SSD1306_128_64
	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA set com pins
     3fa:	8a ed       	ldi	r24, 0xDA	; 218
     3fc:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	ssd1306_command(0x12);									//???
     400:	82 e1       	ldi	r24, 0x12	; 18
     402:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81 two byte command.  contrast increases as value
     406:	81 e8       	ldi	r24, 0x81	; 129
     408:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
															//increases.  feel free to set this to change contrast.
	//if (vccstate == SSD1306_EXTERNALVCC)
	//{ ssd1306_command(0x9F); }
	//else
	{ ssd1306_command(0xCF); }
     40c:	8f ec       	ldi	r24, 0xCF	; 207
     40e:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	//{ ssd1306_command(0x10); }
	//else
	{ ssd1306_command(0xAF); }

	#endif
	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9 //precharge period
     412:	89 ed       	ldi	r24, 0xD9	; 217
     414:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	//if (vccstate == SSD1306_EXTERNALVCC)
	//{ ssd1306_command(0x22); }
	//else
	{ ssd1306_command(0xF1); }
     418:	81 ef       	ldi	r24, 0xF1	; 241
     41a:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB //set Vcomh deselect level.
     41e:	8b ed       	ldi	r24, 0xDB	; 219
     420:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	ssd1306_command(0x40);									// set to 0.77 * Vcc
     424:	80 e4       	ldi	r24, 0x40	; 64
     426:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4 Turn entire display on.
     42a:	84 ea       	ldi	r24, 0xA4	; 164
     42c:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6 set normal display, instead of inverse display
     430:	86 ea       	ldi	r24, 0xA6	; 166
     432:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>

	ssd1306_command(SSD1306_DEACTIVATE_SCROLL);				//no scroll
     436:	8e e2       	ldi	r24, 0x2E	; 46
     438:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
     43c:	9f ef       	ldi	r25, 0xFF	; 255
     43e:	29 e6       	ldi	r18, 0x69	; 105
     440:	88 e1       	ldi	r24, 0x18	; 24
     442:	91 50       	subi	r25, 0x01	; 1
     444:	20 40       	sbci	r18, 0x00	; 0
     446:	80 40       	sbci	r24, 0x00	; 0
     448:	e1 f7       	brne	.-8      	; 0x442 <initDisplay+0xb4>
     44a:	00 c0       	rjmp	.+0      	; 0x44c <initDisplay+0xbe>
     44c:	00 00       	nop

	_delay_ms(1000);
	ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
     44e:	8f ea       	ldi	r24, 0xAF	; 175
     450:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
     454:	9f ef       	ldi	r25, 0xFF	; 255
     456:	29 e6       	ldi	r18, 0x69	; 105
     458:	88 e1       	ldi	r24, 0x18	; 24
     45a:	91 50       	subi	r25, 0x01	; 1
     45c:	20 40       	sbci	r18, 0x00	; 0
     45e:	80 40       	sbci	r24, 0x00	; 0
     460:	e1 f7       	brne	.-8      	; 0x45a <initDisplay+0xcc>
     462:	00 c0       	rjmp	.+0      	; 0x464 <initDisplay+0xd6>
     464:	00 00       	nop
     466:	08 95       	ret

00000468 <refreshDisplay>:
	*/
	
}


void refreshDisplay(){
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
	ssd1306_command(SSD1306_COLUMNADDR); //0x21
     470:	81 e2       	ldi	r24, 0x21	; 33
     472:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	ssd1306_command(0);   // Column start address (0 = reset)
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	
	
	ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
     47c:	8f e7       	ldi	r24, 0x7F	; 127
     47e:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>

	ssd1306_command(SSD1306_PAGEADDR); //0x22
     482:	82 e2       	ldi	r24, 0x22	; 34
     484:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	ssd1306_command(0); // Page start address (0 = reset)
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
	#if SSD1306_LCDHEIGHT == 64
	ssd1306_command(7); // Page end address
     48e:	87 e0       	ldi	r24, 0x07	; 7
     490:	0e 94 b6 01 	call	0x36c	; 0x36c <ssd1306_command>
     494:	cc e3       	ldi	r28, 0x3C	; 60
     496:	d1 e0       	ldi	r29, 0x01	; 1
     498:	0c e3       	ldi	r16, 0x3C	; 60
     49a:	15 e0       	ldi	r17, 0x05	; 5
	//Serial.println(TWSR & 0x3, DEC);

	// I2C
	for (uint16_t i=0; i<(sizeof(buffer)); i++) {

		twiStart();
     49c:	0e 94 73 00 	call	0xe6	; 0xe6 <twiStart>
		//aaa
		uint8_t myaddress = 0b01111000;
		twiWrite(myaddress); //send slave address, which is 0111100, then add a 0 at the front for write
     4a0:	88 e7       	ldi	r24, 0x78	; 120
     4a2:	0e 94 80 00 	call	0x100	; 0x100 <twiWrite>
		//WIRE_WRITE(0x40);
		twiWrite(0x40); //set display start line
     4a6:	80 e4       	ldi	r24, 0x40	; 64
     4a8:	0e 94 80 00 	call	0x100	; 0x100 <twiWrite>
		twiWrite(buffer[i]);
     4ac:	89 91       	ld	r24, Y+
     4ae:	0e 94 80 00 	call	0x100	; 0x100 <twiWrite>
			
			i++;
		}
		i--;*/
		//Wire.endTransmission();
		twiStop();
     4b2:	0e 94 7c 00 	call	0xf8	; 0xf8 <twiStop>

	//Serial.println(TWBR, DEC);
	//Serial.println(TWSR & 0x3, DEC);

	// I2C
	for (uint16_t i=0; i<(sizeof(buffer)); i++) {
     4b6:	c0 17       	cp	r28, r16
     4b8:	d1 07       	cpc	r29, r17
     4ba:	81 f7       	brne	.-32     	; 0x49c <refreshDisplay+0x34>
		}
		i--;*/
		//Wire.endTransmission();
		twiStop();
	}
}
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	08 95       	ret

000004c6 <testDisplay>:
void clearBuffer(void){
	
}*/

void testDisplay(){
	memset(&buffer, 0b01010101, SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8);
     4c6:	40 e0       	ldi	r20, 0x00	; 0
     4c8:	54 e0       	ldi	r21, 0x04	; 4
     4ca:	65 e5       	ldi	r22, 0x55	; 85
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	8c e3       	ldi	r24, 0x3C	; 60
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 3e 09 	call	0x127c	; 0x127c <memset>
     4d6:	08 95       	ret

000004d8 <simpleLinePrint>:
}



void simpleLinePrint(char myString[], uint16_t sizeOfString){
     4d8:	2f 92       	push	r2
     4da:	3f 92       	push	r3
     4dc:	4f 92       	push	r4
     4de:	5f 92       	push	r5
     4e0:	6f 92       	push	r6
     4e2:	7f 92       	push	r7
     4e4:	8f 92       	push	r8
     4e6:	9f 92       	push	r9
     4e8:	af 92       	push	r10
     4ea:	bf 92       	push	r11
     4ec:	cf 92       	push	r12
     4ee:	df 92       	push	r13
     4f0:	ef 92       	push	r14
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	00 d0       	rcall	.+0      	; 0x4fe <simpleLinePrint+0x26>
     4fe:	00 d0       	rcall	.+0      	; 0x500 <simpleLinePrint+0x28>
     500:	00 d0       	rcall	.+0      	; 0x502 <simpleLinePrint+0x2a>
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
	uint16_t positionCounter = 0;
	for(uint16_t i=0; i<sizeOfString; i++){
     506:	61 15       	cp	r22, r1
     508:	71 05       	cpc	r23, r1
     50a:	09 f4       	brne	.+2      	; 0x50e <simpleLinePrint+0x36>
     50c:	1c c1       	rjmp	.+568    	; 0x746 <simpleLinePrint+0x26e>
     50e:	fc 01       	movw	r30, r24
     510:	86 0f       	add	r24, r22
     512:	97 1f       	adc	r25, r23
}



void simpleLinePrint(char myString[], uint16_t sizeOfString){
	uint16_t positionCounter = 0;
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	0f 2e       	mov	r0, r31
     51a:	f6 e0       	ldi	r31, 0x06	; 6
     51c:	ef 2e       	mov	r14, r31
     51e:	f1 e0       	ldi	r31, 0x01	; 1
     520:	ff 2e       	mov	r15, r31
     522:	f0 2d       	mov	r31, r0
     524:	0c e0       	ldi	r16, 0x0C	; 12
     526:	11 e0       	ldi	r17, 0x01	; 1
     528:	0f 2e       	mov	r0, r31
     52a:	f2 e1       	ldi	r31, 0x12	; 18
     52c:	af 2e       	mov	r10, r31
     52e:	f1 e0       	ldi	r31, 0x01	; 1
     530:	bf 2e       	mov	r11, r31
     532:	f0 2d       	mov	r31, r0
     534:	0f 2e       	mov	r0, r31
     536:	f8 e1       	ldi	r31, 0x18	; 24
     538:	8f 2e       	mov	r8, r31
     53a:	f1 e0       	ldi	r31, 0x01	; 1
     53c:	9f 2e       	mov	r9, r31
     53e:	f0 2d       	mov	r31, r0
     540:	0f 2e       	mov	r0, r31
     542:	fe e1       	ldi	r31, 0x1E	; 30
     544:	6f 2e       	mov	r6, r31
     546:	f1 e0       	ldi	r31, 0x01	; 1
     548:	7f 2e       	mov	r7, r31
     54a:	f0 2d       	mov	r31, r0
     54c:	66 e3       	ldi	r22, 0x36	; 54
     54e:	71 e0       	ldi	r23, 0x01	; 1
     550:	4c e3       	ldi	r20, 0x3C	; 60
     552:	51 e0       	ldi	r21, 0x01	; 1
		//printNumber((uint8_t) sizeof(myString));
		//newLine();
		switch(myString[i]){
			case '1':
				for(uint8_t j=0; j<sizeof(number1); j++){
					buffer[positionCounter+j] = number1[j];
     554:	0f 2e       	mov	r0, r31
     556:	fe ef       	ldi	r31, 0xFE	; 254
     558:	3f 2e       	mov	r3, r31
     55a:	f0 2d       	mov	r31, r0
     55c:	fa 83       	std	Y+2, r31	; 0x02
     55e:	e9 83       	std	Y+1, r30	; 0x01
     560:	27 01       	movw	r4, r14
			positionCounter = positionCounter + sizeof(number1);
		}*/
		//printString("rawr");
		//printNumber((uint8_t) sizeof(myString));
		//newLine();
		switch(myString[i]){
     562:	a9 81       	ldd	r26, Y+1	; 0x01
     564:	ba 81       	ldd	r27, Y+2	; 0x02
     566:	2d 90       	ld	r2, X+
     568:	ba 83       	std	Y+2, r27	; 0x02
     56a:	a9 83       	std	Y+1, r26	; 0x01
     56c:	c2 2c       	mov	r12, r2
     56e:	d1 2c       	mov	r13, r1
     570:	d6 01       	movw	r26, r12
     572:	9d 97       	sbiw	r26, 0x2d	; 45
     574:	ad 30       	cpi	r26, 0x0D	; 13
     576:	b1 05       	cpc	r27, r1
     578:	08 f0       	brcs	.+2      	; 0x57c <simpleLinePrint+0xa4>
     57a:	df c0       	rjmp	.+446    	; 0x73a <simpleLinePrint+0x262>
     57c:	ac 5c       	subi	r26, 0xCC	; 204
     57e:	bf 4f       	sbci	r27, 0xFF	; 255
     580:	fd 01       	movw	r30, r26
     582:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__tablejump2__>
			case '1':
				for(uint8_t j=0; j<sizeof(number1); j++){
					buffer[positionCounter+j] = number1[j];
     586:	d9 01       	movw	r26, r18
     588:	a4 5c       	subi	r26, 0xC4	; 196
     58a:	be 4f       	sbci	r27, 0xFE	; 254
     58c:	f4 e0       	ldi	r31, 0x04	; 4
     58e:	fc 93       	st	X, r31
     590:	11 96       	adiw	r26, 0x01	; 1
     592:	3c 92       	st	X, r3
     594:	11 97       	sbiw	r26, 0x01	; 1
     596:	12 96       	adiw	r26, 0x02	; 2
     598:	1c 92       	st	X, r1
				}
				positionCounter = positionCounter + sizeof(number1);
     59a:	2d 5f       	subi	r18, 0xFD	; 253
     59c:	3f 4f       	sbci	r19, 0xFF	; 255
				continue;
     59e:	cd c0       	rjmp	.+410    	; 0x73a <simpleLinePrint+0x262>
     5a0:	a6 e3       	ldi	r26, 0x36	; 54
     5a2:	b1 e0       	ldi	r27, 0x01	; 1
     5a4:	f9 01       	movw	r30, r18
     5a6:	e4 5c       	subi	r30, 0xC4	; 196
     5a8:	fe 4f       	sbci	r31, 0xFE	; 254
     5aa:	e9 80       	ldd	r14, Y+1	; 0x01
     5ac:	fa 80       	ldd	r15, Y+2	; 0x02
			case '2':
				for(uint8_t j=0; j<sizeof(number2); j++){
					buffer[positionCounter+j] = number2[j];
     5ae:	dd 90       	ld	r13, X+
     5b0:	d1 92       	st	Z+, r13
					buffer[positionCounter+j] = number1[j];
				}
				positionCounter = positionCounter + sizeof(number1);
				continue;
			case '2':
				for(uint8_t j=0; j<sizeof(number2); j++){
     5b2:	a4 17       	cp	r26, r20
     5b4:	b5 07       	cpc	r27, r21
     5b6:	d9 f7       	brne	.-10     	; 0x5ae <simpleLinePrint+0xd6>
     5b8:	fa 82       	std	Y+2, r15	; 0x02
     5ba:	e9 82       	std	Y+1, r14	; 0x01
					buffer[positionCounter+j] = number2[j];
				}
				positionCounter = positionCounter + sizeof(number2);
     5bc:	2a 5f       	subi	r18, 0xFA	; 250
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
				continue;
     5c0:	bc c0       	rjmp	.+376    	; 0x73a <simpleLinePrint+0x262>
     5c2:	a0 e3       	ldi	r26, 0x30	; 48
     5c4:	b1 e0       	ldi	r27, 0x01	; 1
     5c6:	f9 01       	movw	r30, r18
     5c8:	e4 5c       	subi	r30, 0xC4	; 196
     5ca:	fe 4f       	sbci	r31, 0xFE	; 254
     5cc:	e9 80       	ldd	r14, Y+1	; 0x01
     5ce:	fa 80       	ldd	r15, Y+2	; 0x02
			case '3':
				for(uint8_t j=0; j<sizeof(number3); j++){
					buffer[positionCounter+j] = number3[j];
     5d0:	dd 90       	ld	r13, X+
     5d2:	d1 92       	st	Z+, r13
					buffer[positionCounter+j] = number2[j];
				}
				positionCounter = positionCounter + sizeof(number2);
				continue;
			case '3':
				for(uint8_t j=0; j<sizeof(number3); j++){
     5d4:	a6 17       	cp	r26, r22
     5d6:	b7 07       	cpc	r27, r23
     5d8:	d9 f7       	brne	.-10     	; 0x5d0 <simpleLinePrint+0xf8>
     5da:	fa 82       	std	Y+2, r15	; 0x02
     5dc:	e9 82       	std	Y+1, r14	; 0x01
					buffer[positionCounter+j] = number3[j];
				}
				positionCounter = positionCounter + sizeof(number3);
     5de:	2a 5f       	subi	r18, 0xFA	; 250
     5e0:	3f 4f       	sbci	r19, 0xFF	; 255
				continue;
     5e2:	ab c0       	rjmp	.+342    	; 0x73a <simpleLinePrint+0x262>
     5e4:	aa e2       	ldi	r26, 0x2A	; 42
     5e6:	b1 e0       	ldi	r27, 0x01	; 1
     5e8:	f9 01       	movw	r30, r18
     5ea:	e4 5c       	subi	r30, 0xC4	; 196
     5ec:	fe 4f       	sbci	r31, 0xFE	; 254
     5ee:	e9 80       	ldd	r14, Y+1	; 0x01
     5f0:	fa 80       	ldd	r15, Y+2	; 0x02
     5f2:	9c 83       	std	Y+4, r25	; 0x04
     5f4:	8b 83       	std	Y+3, r24	; 0x03
			case '4':
				for(uint8_t j=0; j<sizeof(number4); j++){
					buffer[positionCounter+j] = number4[j];
     5f6:	dd 90       	ld	r13, X+
     5f8:	d1 92       	st	Z+, r13
					buffer[positionCounter+j] = number3[j];
				}
				positionCounter = positionCounter + sizeof(number3);
				continue;
			case '4':
				for(uint8_t j=0; j<sizeof(number4); j++){
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	a0 33       	cpi	r26, 0x30	; 48
     5fe:	b8 07       	cpc	r27, r24
     600:	d1 f7       	brne	.-12     	; 0x5f6 <simpleLinePrint+0x11e>
     602:	fa 82       	std	Y+2, r15	; 0x02
     604:	e9 82       	std	Y+1, r14	; 0x01
     606:	8b 81       	ldd	r24, Y+3	; 0x03
     608:	9c 81       	ldd	r25, Y+4	; 0x04
					buffer[positionCounter+j] = number4[j];
				}
				positionCounter = positionCounter + sizeof(number4);
     60a:	2a 5f       	subi	r18, 0xFA	; 250
     60c:	3f 4f       	sbci	r19, 0xFF	; 255
				continue;
     60e:	95 c0       	rjmp	.+298    	; 0x73a <simpleLinePrint+0x262>
     610:	a4 e2       	ldi	r26, 0x24	; 36
     612:	b1 e0       	ldi	r27, 0x01	; 1
     614:	be 83       	std	Y+6, r27	; 0x06
     616:	ad 83       	std	Y+5, r26	; 0x05
     618:	f9 01       	movw	r30, r18
     61a:	e4 5c       	subi	r30, 0xC4	; 196
     61c:	fe 4f       	sbci	r31, 0xFE	; 254
     61e:	e9 80       	ldd	r14, Y+1	; 0x01
     620:	fa 80       	ldd	r15, Y+2	; 0x02
     622:	9c 83       	std	Y+4, r25	; 0x04
     624:	8b 83       	std	Y+3, r24	; 0x03
			case '5':
				for(uint8_t j=0; j<sizeof(number5); j++){
					buffer[positionCounter+j] = number5[j];
     626:	dd 90       	ld	r13, X+
     628:	d1 92       	st	Z+, r13
					buffer[positionCounter+j] = number4[j];
				}
				positionCounter = positionCounter + sizeof(number4);
				continue;
			case '5':
				for(uint8_t j=0; j<sizeof(number5); j++){
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	aa 32       	cpi	r26, 0x2A	; 42
     62e:	b8 07       	cpc	r27, r24
     630:	d1 f7       	brne	.-12     	; 0x626 <simpleLinePrint+0x14e>
     632:	fa 82       	std	Y+2, r15	; 0x02
     634:	e9 82       	std	Y+1, r14	; 0x01
     636:	8b 81       	ldd	r24, Y+3	; 0x03
     638:	9c 81       	ldd	r25, Y+4	; 0x04
					buffer[positionCounter+j] = number5[j];
				}
				positionCounter = positionCounter + sizeof(number5);
     63a:	2a 5f       	subi	r18, 0xFA	; 250
     63c:	3f 4f       	sbci	r19, 0xFF	; 255
				continue;
     63e:	7d c0       	rjmp	.+250    	; 0x73a <simpleLinePrint+0x262>
     640:	ae e1       	ldi	r26, 0x1E	; 30
     642:	b1 e0       	ldi	r27, 0x01	; 1
     644:	f9 01       	movw	r30, r18
     646:	e4 5c       	subi	r30, 0xC4	; 196
     648:	fe 4f       	sbci	r31, 0xFE	; 254
     64a:	e9 80       	ldd	r14, Y+1	; 0x01
     64c:	fa 80       	ldd	r15, Y+2	; 0x02
     64e:	fa 83       	std	Y+2, r31	; 0x02
     650:	e9 83       	std	Y+1, r30	; 0x01
     652:	9c 83       	std	Y+4, r25	; 0x04
     654:	8b 83       	std	Y+3, r24	; 0x03
			case '6':
				for(uint8_t j=0; j<sizeof(number6); j++){
					buffer[positionCounter+j] = number6[j];
     656:	dd 90       	ld	r13, X+
     658:	e9 81       	ldd	r30, Y+1	; 0x01
     65a:	fa 81       	ldd	r31, Y+2	; 0x02
     65c:	d1 92       	st	Z+, r13
     65e:	fa 83       	std	Y+2, r31	; 0x02
     660:	e9 83       	std	Y+1, r30	; 0x01
					buffer[positionCounter+j] = number5[j];
				}
				positionCounter = positionCounter + sizeof(number5);
				continue;
			case '6':
				for(uint8_t j=0; j<sizeof(number6); j++){
     662:	f1 e0       	ldi	r31, 0x01	; 1
     664:	a4 32       	cpi	r26, 0x24	; 36
     666:	bf 07       	cpc	r27, r31
     668:	b1 f7       	brne	.-20     	; 0x656 <simpleLinePrint+0x17e>
     66a:	fa 82       	std	Y+2, r15	; 0x02
     66c:	e9 82       	std	Y+1, r14	; 0x01
     66e:	8b 81       	ldd	r24, Y+3	; 0x03
     670:	9c 81       	ldd	r25, Y+4	; 0x04
					buffer[positionCounter+j] = number6[j];
				}
				positionCounter = positionCounter + sizeof(number6);
     672:	2a 5f       	subi	r18, 0xFA	; 250
     674:	3f 4f       	sbci	r19, 0xFF	; 255
				continue;
     676:	61 c0       	rjmp	.+194    	; 0x73a <simpleLinePrint+0x262>
     678:	a8 e1       	ldi	r26, 0x18	; 24
     67a:	b1 e0       	ldi	r27, 0x01	; 1
     67c:	f9 01       	movw	r30, r18
     67e:	e4 5c       	subi	r30, 0xC4	; 196
     680:	fe 4f       	sbci	r31, 0xFE	; 254
     682:	e9 80       	ldd	r14, Y+1	; 0x01
     684:	fa 80       	ldd	r15, Y+2	; 0x02
			case '7':
				for(uint8_t j=0; j<sizeof(number7); j++){
					buffer[positionCounter+j] = number7[j];
     686:	dd 90       	ld	r13, X+
     688:	d1 92       	st	Z+, r13
					buffer[positionCounter+j] = number6[j];
				}
				positionCounter = positionCounter + sizeof(number6);
				continue;
			case '7':
				for(uint8_t j=0; j<sizeof(number7); j++){
     68a:	a6 15       	cp	r26, r6
     68c:	b7 05       	cpc	r27, r7
     68e:	d9 f7       	brne	.-10     	; 0x686 <simpleLinePrint+0x1ae>
     690:	fa 82       	std	Y+2, r15	; 0x02
     692:	e9 82       	std	Y+1, r14	; 0x01
					buffer[positionCounter+j] = number7[j];
				}
				positionCounter = positionCounter + sizeof(number7);
     694:	2a 5f       	subi	r18, 0xFA	; 250
     696:	3f 4f       	sbci	r19, 0xFF	; 255
				continue;
     698:	50 c0       	rjmp	.+160    	; 0x73a <simpleLinePrint+0x262>
     69a:	a2 e1       	ldi	r26, 0x12	; 18
     69c:	b1 e0       	ldi	r27, 0x01	; 1
     69e:	f9 01       	movw	r30, r18
     6a0:	e4 5c       	subi	r30, 0xC4	; 196
     6a2:	fe 4f       	sbci	r31, 0xFE	; 254
     6a4:	e9 80       	ldd	r14, Y+1	; 0x01
     6a6:	fa 80       	ldd	r15, Y+2	; 0x02
			case '8':
				for(uint8_t j=0; j<sizeof(number8); j++){
					buffer[positionCounter+j] = number8[j];
     6a8:	dd 90       	ld	r13, X+
     6aa:	d1 92       	st	Z+, r13
					buffer[positionCounter+j] = number7[j];
				}
				positionCounter = positionCounter + sizeof(number7);
				continue;
			case '8':
				for(uint8_t j=0; j<sizeof(number8); j++){
     6ac:	a8 15       	cp	r26, r8
     6ae:	b9 05       	cpc	r27, r9
     6b0:	d9 f7       	brne	.-10     	; 0x6a8 <simpleLinePrint+0x1d0>
     6b2:	fa 82       	std	Y+2, r15	; 0x02
     6b4:	e9 82       	std	Y+1, r14	; 0x01
					buffer[positionCounter+j] = number8[j];
				}
				positionCounter = positionCounter + sizeof(number8);
     6b6:	2a 5f       	subi	r18, 0xFA	; 250
     6b8:	3f 4f       	sbci	r19, 0xFF	; 255
				continue;
     6ba:	3f c0       	rjmp	.+126    	; 0x73a <simpleLinePrint+0x262>
     6bc:	ac e0       	ldi	r26, 0x0C	; 12
     6be:	b1 e0       	ldi	r27, 0x01	; 1
     6c0:	f9 01       	movw	r30, r18
     6c2:	e4 5c       	subi	r30, 0xC4	; 196
     6c4:	fe 4f       	sbci	r31, 0xFE	; 254
     6c6:	e9 80       	ldd	r14, Y+1	; 0x01
     6c8:	fa 80       	ldd	r15, Y+2	; 0x02
			case '9':
				for(uint8_t j=0; j<sizeof(number9); j++){
					buffer[positionCounter+j] = number9[j];
     6ca:	dd 90       	ld	r13, X+
     6cc:	d1 92       	st	Z+, r13
					buffer[positionCounter+j] = number8[j];
				}
				positionCounter = positionCounter + sizeof(number8);
				continue;
			case '9':
				for(uint8_t j=0; j<sizeof(number9); j++){
     6ce:	aa 15       	cp	r26, r10
     6d0:	bb 05       	cpc	r27, r11
     6d2:	d9 f7       	brne	.-10     	; 0x6ca <simpleLinePrint+0x1f2>
     6d4:	fa 82       	std	Y+2, r15	; 0x02
     6d6:	e9 82       	std	Y+1, r14	; 0x01
					buffer[positionCounter+j] = number9[j];
				}
				positionCounter = positionCounter + sizeof(number9);
     6d8:	2a 5f       	subi	r18, 0xFA	; 250
     6da:	3f 4f       	sbci	r19, 0xFF	; 255
				continue;
     6dc:	2e c0       	rjmp	.+92     	; 0x73a <simpleLinePrint+0x262>
     6de:	a6 e0       	ldi	r26, 0x06	; 6
     6e0:	b1 e0       	ldi	r27, 0x01	; 1
     6e2:	f9 01       	movw	r30, r18
     6e4:	e4 5c       	subi	r30, 0xC4	; 196
     6e6:	fe 4f       	sbci	r31, 0xFE	; 254
     6e8:	e9 80       	ldd	r14, Y+1	; 0x01
     6ea:	fa 80       	ldd	r15, Y+2	; 0x02
			case '0':
				for(uint8_t j=0; j<sizeof(number0); j++){
					buffer[positionCounter+j] = number0[j];
     6ec:	dd 90       	ld	r13, X+
     6ee:	d1 92       	st	Z+, r13
					buffer[positionCounter+j] = number9[j];
				}
				positionCounter = positionCounter + sizeof(number9);
				continue;
			case '0':
				for(uint8_t j=0; j<sizeof(number0); j++){
     6f0:	a0 17       	cp	r26, r16
     6f2:	b1 07       	cpc	r27, r17
     6f4:	d9 f7       	brne	.-10     	; 0x6ec <simpleLinePrint+0x214>
     6f6:	fa 82       	std	Y+2, r15	; 0x02
     6f8:	e9 82       	std	Y+1, r14	; 0x01
					buffer[positionCounter+j] = number0[j];
				}
				positionCounter = positionCounter + sizeof(number0);
     6fa:	2a 5f       	subi	r18, 0xFA	; 250
     6fc:	3f 4f       	sbci	r19, 0xFF	; 255
				continue;
     6fe:	1d c0       	rjmp	.+58     	; 0x73a <simpleLinePrint+0x262>
			case '.':
				for(uint8_t j=0; j<sizeof(decimalPlace); j++){
					buffer[positionCounter+j] = decimalPlace[j];
     700:	d9 01       	movw	r26, r18
     702:	a4 5c       	subi	r26, 0xC4	; 196
     704:	be 4f       	sbci	r27, 0xFE	; 254
     706:	1c 92       	st	X, r1
     708:	f0 e4       	ldi	r31, 0x40	; 64
     70a:	11 96       	adiw	r26, 0x01	; 1
     70c:	fc 93       	st	X, r31
     70e:	11 97       	sbiw	r26, 0x01	; 1
     710:	12 96       	adiw	r26, 0x02	; 2
     712:	1c 92       	st	X, r1
				}
				positionCounter = positionCounter + sizeof(decimalPlace);
     714:	2d 5f       	subi	r18, 0xFD	; 253
     716:	3f 4f       	sbci	r19, 0xFF	; 255
				continue;
     718:	10 c0       	rjmp	.+32     	; 0x73a <simpleLinePrint+0x262>
     71a:	a0 e0       	ldi	r26, 0x00	; 0
     71c:	b1 e0       	ldi	r27, 0x01	; 1
     71e:	f9 01       	movw	r30, r18
     720:	e4 5c       	subi	r30, 0xC4	; 196
     722:	fe 4f       	sbci	r31, 0xFE	; 254
     724:	e9 80       	ldd	r14, Y+1	; 0x01
     726:	fa 80       	ldd	r15, Y+2	; 0x02
			case '-':
				for(uint8_t j=0; j<sizeof(minusSign); j++){
					buffer[positionCounter+j] = minusSign[j];
     728:	dd 90       	ld	r13, X+
     72a:	d1 92       	st	Z+, r13
					buffer[positionCounter+j] = decimalPlace[j];
				}
				positionCounter = positionCounter + sizeof(decimalPlace);
				continue;
			case '-':
				for(uint8_t j=0; j<sizeof(minusSign); j++){
     72c:	a4 15       	cp	r26, r4
     72e:	b5 05       	cpc	r27, r5
     730:	d9 f7       	brne	.-10     	; 0x728 <simpleLinePrint+0x250>
     732:	fa 82       	std	Y+2, r15	; 0x02
     734:	e9 82       	std	Y+1, r14	; 0x01
					buffer[positionCounter+j] = minusSign[j];
				}
				positionCounter = positionCounter + sizeof(minusSign);
     736:	2a 5f       	subi	r18, 0xFA	; 250
     738:	3f 4f       	sbci	r19, 0xFF	; 255



void simpleLinePrint(char myString[], uint16_t sizeOfString){
	uint16_t positionCounter = 0;
	for(uint16_t i=0; i<sizeOfString; i++){
     73a:	a9 81       	ldd	r26, Y+1	; 0x01
     73c:	ba 81       	ldd	r27, Y+2	; 0x02
     73e:	a8 17       	cp	r26, r24
     740:	b9 07       	cpc	r27, r25
     742:	09 f0       	breq	.+2      	; 0x746 <simpleLinePrint+0x26e>
     744:	0e cf       	rjmp	.-484    	; 0x562 <simpleLinePrint+0x8a>
				positionCounter = positionCounter + sizeof(minusSign);
				continue;
		}
		
	}
}
     746:	26 96       	adiw	r28, 0x06	; 6
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	df 90       	pop	r13
     760:	cf 90       	pop	r12
     762:	bf 90       	pop	r11
     764:	af 90       	pop	r10
     766:	9f 90       	pop	r9
     768:	8f 90       	pop	r8
     76a:	7f 90       	pop	r7
     76c:	6f 90       	pop	r6
     76e:	5f 90       	pop	r5
     770:	4f 90       	pop	r4
     772:	3f 90       	pop	r3
     774:	2f 90       	pop	r2
     776:	08 95       	ret

00000778 <multilineScrollPrint>:
/*
Pseudocode:
delete last 128 places, then move all things before it 128 places,
then add new line.
*/
void multilineScrollPrint(char myString[], uint16_t sizeOfString){
     778:	ed e3       	ldi	r30, 0x3D	; 61
     77a:	f5 e0       	ldi	r31, 0x05	; 5
     77c:	2c e3       	ldi	r18, 0x3C	; 60
     77e:	31 e0       	ldi	r19, 0x01	; 1
     780:	4d eb       	ldi	r20, 0xBD	; 189
     782:	54 e0       	ldi	r21, 0x04	; 4
	for(int i = 0; i<128; i++){
		buffer[(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8)-i] = 0b00000000;
     784:	12 92       	st	-Z, r1
Pseudocode:
delete last 128 places, then move all things before it 128 places,
then add new line.
*/
void multilineScrollPrint(char myString[], uint16_t sizeOfString){
	for(int i = 0; i<128; i++){
     786:	e4 17       	cp	r30, r20
     788:	f5 07       	cpc	r31, r21
     78a:	e1 f7       	brne	.-8      	; 0x784 <multilineScrollPrint+0xc>
     78c:	ec eb       	ldi	r30, 0xBC	; 188
     78e:	f4 e0       	ldi	r31, 0x04	; 4
     790:	ac e3       	ldi	r26, 0x3C	; 60
     792:	b5 e0       	ldi	r27, 0x05	; 5
		buffer[(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8)-i] = 0b00000000;
	}	
	for(int i=((SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8)-129); i>=0; i--){
		buffer[i+128] = buffer[i];
     794:	42 91       	ld	r20, -Z
     796:	4e 93       	st	-X, r20
*/
void multilineScrollPrint(char myString[], uint16_t sizeOfString){
	for(int i = 0; i<128; i++){
		buffer[(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8)-i] = 0b00000000;
	}	
	for(int i=((SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8)-129); i>=0; i--){
     798:	2e 17       	cp	r18, r30
     79a:	3f 07       	cpc	r19, r31
     79c:	d9 f7       	brne	.-10     	; 0x794 <multilineScrollPrint+0x1c>
     79e:	ec e3       	ldi	r30, 0x3C	; 60
     7a0:	f1 e0       	ldi	r31, 0x01	; 1
     7a2:	2c eb       	ldi	r18, 0xBC	; 188
     7a4:	31 e0       	ldi	r19, 0x01	; 1
		buffer[i+128] = buffer[i];
	}
	for(int i = 0; i<128; i++){
		buffer[i] = 0b00000000;
     7a6:	11 92       	st	Z+, r1
		buffer[(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8)-i] = 0b00000000;
	}	
	for(int i=((SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8)-129); i>=0; i--){
		buffer[i+128] = buffer[i];
	}
	for(int i = 0; i<128; i++){
     7a8:	e2 17       	cp	r30, r18
     7aa:	f3 07       	cpc	r31, r19
     7ac:	e1 f7       	brne	.-8      	; 0x7a6 <multilineScrollPrint+0x2e>
		buffer[i] = 0b00000000;
	}
	simpleLinePrint(myString, sizeOfString);
     7ae:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <simpleLinePrint>
     7b2:	08 95       	ret

000007b4 <floatToString>:

//converts a float to a char array
//code modified from:
//source: https://stackoverflow.com/questions/23191203/convert-float-to-string-without-sprintf
//This function does not round.
char * floatToString(float x, char *p, uint8_t decimalPlaces) {
     7b4:	2f 92       	push	r2
     7b6:	3f 92       	push	r3
     7b8:	4f 92       	push	r4
     7ba:	5f 92       	push	r5
     7bc:	6f 92       	push	r6
     7be:	7f 92       	push	r7
     7c0:	8f 92       	push	r8
     7c2:	9f 92       	push	r9
     7c4:	af 92       	push	r10
     7c6:	bf 92       	push	r11
     7c8:	cf 92       	push	r12
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	4b 01       	movw	r8, r22
     7d8:	5c 01       	movw	r10, r24
     7da:	1a 01       	movw	r2, r20
     7dc:	12 2f       	mov	r17, r18
	//newLine();
	char *s = p + 30; // go to end of buffer
	uint32_t decimals;  // variable to store the decimals
	uint32_t units;  // variable to store the units (part to left of decimal place)
	uint16_t a;
	if(decimalPlaces == 1){
     7de:	21 30       	cpi	r18, 0x01	; 1
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <floatToString+0x30>
     7e2:	e7 c0       	rjmp	.+462    	; 0x9b2 <__stack+0xb3>
		a=10;
	}else if(decimalPlaces == 2){
     7e4:	22 30       	cpi	r18, 0x02	; 2
     7e6:	09 f4       	brne	.+2      	; 0x7ea <floatToString+0x36>
     7e8:	e7 c0       	rjmp	.+462    	; 0x9b8 <__stack+0xb9>
		a=100;
	}else if(decimalPlaces == 3){
     7ea:	23 30       	cpi	r18, 0x03	; 3
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <floatToString+0x3c>
     7ee:	e7 c0       	rjmp	.+462    	; 0x9be <__stack+0xbf>
		a=1000;
	}else if(decimalPlaces == 4){
     7f0:	24 30       	cpi	r18, 0x04	; 4
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <floatToString+0x42>
     7f4:	e7 c0       	rjmp	.+462    	; 0x9c4 <__stack+0xc5>
	}else{
		//no decimals
		a = 1;
	}
	
	if (x < 0) { // take care of negative numbers
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	a9 01       	movw	r20, r18
     7fc:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__cmpsf2>
     800:	88 23       	and	r24, r24
     802:	04 f5       	brge	.+64     	; 0x844 <floatToString+0x90>
		a=1000;
	}else if(decimalPlaces == 4){
		a=10000;
	}else{
		//no decimals
		a = 1;
     804:	c1 e0       	ldi	r28, 0x01	; 1
     806:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	if (x < 0) { // take care of negative numbers
		if(decimalPlaces != 0){
     808:	11 23       	and	r17, r17
     80a:	a1 f0       	breq	.+40     	; 0x834 <floatToString+0x80>
			decimals = (uint32_t)(x * a * -1) % a; // make 1000 for 3 decimals etc.
     80c:	6e 01       	movw	r12, r28
     80e:	e1 2c       	mov	r14, r1
     810:	f1 2c       	mov	r15, r1
     812:	c7 01       	movw	r24, r14
     814:	b6 01       	movw	r22, r12
     816:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__floatunsisf>
     81a:	a5 01       	movw	r20, r10
     81c:	94 01       	movw	r18, r8
     81e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__mulsf3>
     822:	90 58       	subi	r25, 0x80	; 128
     824:	0e 94 a2 07 	call	0xf44	; 0xf44 <__fixunssfsi>
     828:	a7 01       	movw	r20, r14
     82a:	96 01       	movw	r18, r12
     82c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__udivmodsi4>
     830:	2b 01       	movw	r4, r22
     832:	3c 01       	movw	r6, r24
		}		
		units = (uint32_t)(-1 * x);
     834:	c5 01       	movw	r24, r10
     836:	b4 01       	movw	r22, r8
     838:	90 58       	subi	r25, 0x80	; 128
     83a:	0e 94 a2 07 	call	0xf44	; 0xf44 <__fixunssfsi>
     83e:	6b 01       	movw	r12, r22
     840:	7c 01       	movw	r14, r24
     842:	1d c0       	rjmp	.+58     	; 0x87e <floatToString+0xca>
	} else { // positive numbers
		if(decimalPlaces != 0){
     844:	11 23       	and	r17, r17
     846:	a9 f0       	breq	.+42     	; 0x872 <floatToString+0xbe>
		a=1000;
	}else if(decimalPlaces == 4){
		a=10000;
	}else{
		//no decimals
		a = 1;
     848:	c1 e0       	ldi	r28, 0x01	; 1
     84a:	d0 e0       	ldi	r29, 0x00	; 0
			decimals = (uint32_t)(x * a * -1) % a; // make 1000 for 3 decimals etc.
		}		
		units = (uint32_t)(-1 * x);
	} else { // positive numbers
		if(decimalPlaces != 0){
			decimals = (uint32_t)(x * a) % a;
     84c:	6e 01       	movw	r12, r28
     84e:	e1 2c       	mov	r14, r1
     850:	f1 2c       	mov	r15, r1
     852:	c7 01       	movw	r24, r14
     854:	b6 01       	movw	r22, r12
     856:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__floatunsisf>
     85a:	a5 01       	movw	r20, r10
     85c:	94 01       	movw	r18, r8
     85e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__mulsf3>
     862:	0e 94 a2 07 	call	0xf44	; 0xf44 <__fixunssfsi>
     866:	a7 01       	movw	r20, r14
     868:	96 01       	movw	r18, r12
     86a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__udivmodsi4>
     86e:	2b 01       	movw	r4, r22
     870:	3c 01       	movw	r6, r24
		}		
		units = (uint32_t)x;
     872:	c5 01       	movw	r24, r10
     874:	b4 01       	movw	r22, r8
     876:	0e 94 a2 07 	call	0xf44	; 0xf44 <__fixunssfsi>
     87a:	6b 01       	movw	r12, r22
     87c:	7c 01       	movw	r14, r24
	newLine();
	print32BitNumber(decimals/100);
	newLine();
	*/
	
	if(decimalPlaces > 0){
     87e:	11 23       	and	r17, r17
     880:	09 f4       	brne	.+2      	; 0x884 <floatToString+0xd0>
     882:	5c c0       	rjmp	.+184    	; 0x93c <__stack+0x3d>
		*--s = (decimals % 10) + '0';
     884:	c3 01       	movw	r24, r6
     886:	b2 01       	movw	r22, r4
     888:	2a e0       	ldi	r18, 0x0A	; 10
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e0       	ldi	r20, 0x00	; 0
     88e:	50 e0       	ldi	r21, 0x00	; 0
     890:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__udivmodsi4>
     894:	60 5d       	subi	r22, 0xD0	; 208
     896:	f1 01       	movw	r30, r2
     898:	65 8f       	std	Z+29, r22	; 0x1d
		decimals /= 10; // repeat for as many decimal places as you need
		if(decimalPlaces >1){
     89a:	12 30       	cpi	r17, 0x02	; 2
     89c:	18 f4       	brcc	.+6      	; 0x8a4 <floatToString+0xf0>
	print32BitNumber(decimals/100);
	newLine();
	*/
	
	if(decimalPlaces > 0){
		*--s = (decimals % 10) + '0';
     89e:	e1 01       	movw	r28, r2
     8a0:	6d 96       	adiw	r28, 0x1d	; 29
     8a2:	49 c0       	rjmp	.+146    	; 0x936 <__stack+0x37>
		decimals /= 10; // repeat for as many decimal places as you need
     8a4:	c3 01       	movw	r24, r6
     8a6:	b2 01       	movw	r22, r4
     8a8:	2a e0       	ldi	r18, 0x0A	; 10
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__udivmodsi4>
     8b4:	29 01       	movw	r4, r18
     8b6:	3a 01       	movw	r6, r20
		if(decimalPlaces >1){
			*--s = (decimals % 10) + '0';
     8b8:	ca 01       	movw	r24, r20
     8ba:	b9 01       	movw	r22, r18
     8bc:	2a e0       	ldi	r18, 0x0A	; 10
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__udivmodsi4>
     8c8:	60 5d       	subi	r22, 0xD0	; 208
     8ca:	f1 01       	movw	r30, r2
     8cc:	64 8f       	std	Z+28, r22	; 0x1c
			decimals /= 10;
			if(decimalPlaces > 2){
     8ce:	13 30       	cpi	r17, 0x03	; 3
     8d0:	18 f4       	brcc	.+6      	; 0x8d8 <floatToString+0x124>
	
	if(decimalPlaces > 0){
		*--s = (decimals % 10) + '0';
		decimals /= 10; // repeat for as many decimal places as you need
		if(decimalPlaces >1){
			*--s = (decimals % 10) + '0';
     8d2:	e1 01       	movw	r28, r2
     8d4:	6c 96       	adiw	r28, 0x1c	; 28
     8d6:	2f c0       	rjmp	.+94     	; 0x936 <__stack+0x37>
			decimals /= 10;
     8d8:	c3 01       	movw	r24, r6
     8da:	b2 01       	movw	r22, r4
     8dc:	2a e0       	ldi	r18, 0x0A	; 10
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e0       	ldi	r20, 0x00	; 0
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__udivmodsi4>
     8e8:	29 01       	movw	r4, r18
     8ea:	3a 01       	movw	r6, r20
			if(decimalPlaces > 2){
				*--s = (decimals % 10) + '0';
     8ec:	ca 01       	movw	r24, r20
     8ee:	b9 01       	movw	r22, r18
     8f0:	2a e0       	ldi	r18, 0x0A	; 10
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__udivmodsi4>
     8fc:	60 5d       	subi	r22, 0xD0	; 208
     8fe:	f1 01       	movw	r30, r2
     900:	63 8f       	std	Z+27, r22	; 0x1b
				decimals /= 10;
				if(decimalPlaces > 3){
     902:	14 30       	cpi	r17, 0x04	; 4
     904:	18 f4       	brcc	.+6      	; 0x90c <__stack+0xd>
		decimals /= 10; // repeat for as many decimal places as you need
		if(decimalPlaces >1){
			*--s = (decimals % 10) + '0';
			decimals /= 10;
			if(decimalPlaces > 2){
				*--s = (decimals % 10) + '0';
     906:	e1 01       	movw	r28, r2
     908:	6b 96       	adiw	r28, 0x1b	; 27
     90a:	15 c0       	rjmp	.+42     	; 0x936 <__stack+0x37>
				decimals /= 10;
				if(decimalPlaces > 3){
					*--s = (decimals % 10) + '0';
     90c:	e1 01       	movw	r28, r2
     90e:	6a 96       	adiw	r28, 0x1a	; 26
		if(decimalPlaces >1){
			*--s = (decimals % 10) + '0';
			decimals /= 10;
			if(decimalPlaces > 2){
				*--s = (decimals % 10) + '0';
				decimals /= 10;
     910:	c3 01       	movw	r24, r6
     912:	b2 01       	movw	r22, r4
     914:	2a e0       	ldi	r18, 0x0A	; 10
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__udivmodsi4>
				if(decimalPlaces > 3){
					*--s = (decimals % 10) + '0';
     920:	ca 01       	movw	r24, r20
     922:	b9 01       	movw	r22, r18
     924:	2a e0       	ldi	r18, 0x0A	; 10
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	40 e0       	ldi	r20, 0x00	; 0
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__udivmodsi4>
     930:	60 5d       	subi	r22, 0xD0	; 208
     932:	f1 01       	movw	r30, r2
     934:	62 8f       	std	Z+26, r22	; 0x1a
					decimals /= 10;
				}
			}
		}
		*--s = '.';
     936:	8e e2       	ldi	r24, 0x2E	; 46
     938:	8a 93       	st	-Y, r24
     93a:	07 c0       	rjmp	.+14     	; 0x94a <__stack+0x4b>
	}else{
		//add 1 zero to the end.		
		*--s = '\0'+'0';
     93c:	80 e3       	ldi	r24, 0x30	; 48
     93e:	f1 01       	movw	r30, r2
     940:	85 8f       	std	Z+29, r24	; 0x1d
		*--s = '.';
     942:	e1 01       	movw	r28, r2
     944:	6c 96       	adiw	r28, 0x1c	; 28
     946:	8e e2       	ldi	r24, 0x2E	; 46
     948:	84 8f       	std	Z+28, r24	; 0x1c
	}
	
	

	while (units > 0) {
     94a:	c1 14       	cp	r12, r1
     94c:	d1 04       	cpc	r13, r1
     94e:	e1 04       	cpc	r14, r1
     950:	f1 04       	cpc	r15, r1
     952:	c1 f0       	breq	.+48     	; 0x984 <__stack+0x85>
		*--s = (units % 10) + '0';
     954:	0f 2e       	mov	r0, r31
     956:	fa e0       	ldi	r31, 0x0A	; 10
     958:	4f 2e       	mov	r4, r31
     95a:	51 2c       	mov	r5, r1
     95c:	61 2c       	mov	r6, r1
     95e:	71 2c       	mov	r7, r1
     960:	f0 2d       	mov	r31, r0
     962:	c7 01       	movw	r24, r14
     964:	b6 01       	movw	r22, r12
     966:	a3 01       	movw	r20, r6
     968:	92 01       	movw	r18, r4
     96a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__udivmodsi4>
     96e:	60 5d       	subi	r22, 0xD0	; 208
     970:	6a 93       	st	-Y, r22
		units /= 10;
     972:	c2 2e       	mov	r12, r18
     974:	d3 2e       	mov	r13, r19
     976:	e4 2e       	mov	r14, r20
     978:	f5 2e       	mov	r15, r21
		*--s = '.';
	}
	
	

	while (units > 0) {
     97a:	c1 14       	cp	r12, r1
     97c:	d1 04       	cpc	r13, r1
     97e:	e1 04       	cpc	r14, r1
     980:	f1 04       	cpc	r15, r1
     982:	79 f7       	brne	.-34     	; 0x962 <__stack+0x63>
		*--s = (units % 10) + '0';
		units /= 10;
	}
	if (x < 0) *--s = '-'; // unary minus sign for negative numbers
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	a9 01       	movw	r20, r18
     98a:	c5 01       	movw	r24, r10
     98c:	b4 01       	movw	r22, r8
     98e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__cmpsf2>
     992:	88 23       	and	r24, r24
     994:	14 f4       	brge	.+4      	; 0x99a <__stack+0x9b>
     996:	8d e2       	ldi	r24, 0x2D	; 45
     998:	8a 93       	st	-Y, r24
	if(x == 0){*--s = '\0'+'0';}
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	a9 01       	movw	r20, r18
     9a0:	c5 01       	movw	r24, r10
     9a2:	b4 01       	movw	r22, r8
     9a4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__cmpsf2>
     9a8:	81 11       	cpse	r24, r1
     9aa:	19 c0       	rjmp	.+50     	; 0x9de <__stack+0xdf>
     9ac:	80 e3       	ldi	r24, 0x30	; 48
     9ae:	8a 93       	st	-Y, r24
     9b0:	16 c0       	rjmp	.+44     	; 0x9de <__stack+0xdf>
	char *s = p + 30; // go to end of buffer
	uint32_t decimals;  // variable to store the decimals
	uint32_t units;  // variable to store the units (part to left of decimal place)
	uint16_t a;
	if(decimalPlaces == 1){
		a=10;
     9b2:	ca e0       	ldi	r28, 0x0A	; 10
     9b4:	d0 e0       	ldi	r29, 0x00	; 0
     9b6:	08 c0       	rjmp	.+16     	; 0x9c8 <__stack+0xc9>
	}else if(decimalPlaces == 2){
		a=100;
     9b8:	c4 e6       	ldi	r28, 0x64	; 100
     9ba:	d0 e0       	ldi	r29, 0x00	; 0
     9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <__stack+0xc9>
	}else if(decimalPlaces == 3){
		a=1000;
     9be:	c8 ee       	ldi	r28, 0xE8	; 232
     9c0:	d3 e0       	ldi	r29, 0x03	; 3
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <__stack+0xc9>
	}else if(decimalPlaces == 4){
		a=10000;
     9c4:	c0 e1       	ldi	r28, 0x10	; 16
     9c6:	d7 e2       	ldi	r29, 0x27	; 39
	}else{
		//no decimals
		a = 1;
	}
	
	if (x < 0) { // take care of negative numbers
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	a9 01       	movw	r20, r18
     9ce:	c5 01       	movw	r24, r10
     9d0:	b4 01       	movw	r22, r8
     9d2:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__cmpsf2>
     9d6:	88 23       	and	r24, r24
     9d8:	0c f0       	brlt	.+2      	; 0x9dc <__stack+0xdd>
     9da:	38 cf       	rjmp	.-400    	; 0x84c <floatToString+0x98>
     9dc:	15 cf       	rjmp	.-470    	; 0x808 <floatToString+0x54>
		units /= 10;
	}
	if (x < 0) *--s = '-'; // unary minus sign for negative numbers
	if(x == 0){*--s = '\0'+'0';}
	return s;
}
     9de:	ce 01       	movw	r24, r28
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	df 90       	pop	r13
     9ec:	cf 90       	pop	r12
     9ee:	bf 90       	pop	r11
     9f0:	af 90       	pop	r10
     9f2:	9f 90       	pop	r9
     9f4:	8f 90       	pop	r8
     9f6:	7f 90       	pop	r7
     9f8:	6f 90       	pop	r6
     9fa:	5f 90       	pop	r5
     9fc:	4f 90       	pop	r4
     9fe:	3f 90       	pop	r3
     a00:	2f 90       	pop	r2
     a02:	08 95       	ret

00000a04 <main>:

//interrupt declaration needs to be here
ISR(PCINT2_vect);
ISR(USART_RX_vect);

int main (void){
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	ca 57       	subi	r28, 0x7A	; 122
     a0e:	d1 09       	sbc	r29, r1
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	de bf       	out	0x3e, r29	; 62
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	cd bf       	out	0x3d, r28	; 61
	ringBuffInit_v(&usartRingBuff);
     a1a:	8f e3       	ldi	r24, 0x3F	; 63
     a1c:	95 e0       	ldi	r25, 0x05	; 5
     a1e:	0e 94 20 07 	call	0xe40	; 0xe40 <ringBuffInit_v>
	
	//turn on LED attached to pin PB0
	//used to see if 
	PORTB |= (1<<PB0);
     a22:	28 9a       	sbi	0x05, 0	; 5
	DDRB ^= (1<<DDB0);	
     a24:	94 b1       	in	r25, 0x04	; 4
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	89 27       	eor	r24, r25
     a2a:	84 b9       	out	0x04, r24	; 4
	
	encoderInitWithInt();
     a2c:	0e 94 6c 07 	call	0xed8	; 0xed8 <encoderInitWithInt>
	twiInit();	
     a30:	0e 94 6a 00 	call	0xd4	; 0xd4 <twiInit>
	initDisplay();
     a34:	0e 94 c7 01 	call	0x38e	; 0x38e <initDisplay>
	bluetoothModuleInit();
     a38:	0e 94 60 00 	call	0xc0	; 0xc0 <bluetoothModuleInit>
	//bluetoothModleSet();  //used to set the name and pin of the bluetooth module
	bluetoothModuleEnableInterrupt();
     a3c:	0e 94 63 00 	call	0xc6	; 0xc6 <bluetoothModuleEnableInterrupt>
	testDisplay(); //displays lines on the screen.
     a40:	0e 94 63 02 	call	0x4c6	; 0x4c6 <testDisplay>
	refreshDisplay(); //updates the screen.
     a44:	0e 94 34 02 	call	0x468	; 0x468 <refreshDisplay>
		
	char bewp[1] = "2";	
     a48:	82 e3       	ldi	r24, 0x32	; 50
     a4a:	89 83       	std	Y+1, r24	; 0x01
	multilineScrollPrint(bewp, (uint16_t) 1);	
     a4c:	61 e0       	ldi	r22, 0x01	; 1
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	ce 01       	movw	r24, r28
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	0e 94 bc 03 	call	0x778	; 0x778 <multilineScrollPrint>
	refreshDisplay();	
     a58:	0e 94 34 02 	call	0x468	; 0x468 <refreshDisplay>
	
	char myBuffer[30] = {0};	//used for the floatToString function.
     a5c:	fe 01       	movw	r30, r28
     a5e:	32 96       	adiw	r30, 0x02	; 2
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	df 01       	movw	r26, r30
     a64:	1d 92       	st	X+, r1
     a66:	8a 95       	dec	r24
     a68:	e9 f7       	brne	.-6      	; 0xa64 <main+0x60>
	char *myValue;
	
	//buffer used for printing.
	ringBuffer printBuffer;
	ringBuffInit(&printBuffer);
     a6a:	ce 01       	movw	r24, r28
     a6c:	80 96       	adiw	r24, 0x20	; 32
     a6e:	0e 94 1a 07 	call	0xe34	; 0xe34 <ringBuffInit>
     a72:	bf ef       	ldi	r27, 0xFF	; 255
     a74:	e9 e6       	ldi	r30, 0x69	; 105
     a76:	f8 e1       	ldi	r31, 0x18	; 24
     a78:	b1 50       	subi	r27, 0x01	; 1
     a7a:	e0 40       	sbci	r30, 0x00	; 0
     a7c:	f0 40       	sbci	r31, 0x00	; 0
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <main+0x74>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <main+0x7e>
     a82:	00 00       	nop
		_delay_ms(15);
		rgbLEDshow(testRGBLED.numBytes,(uint8_t *) (testRGBLED.pixels), testRGBLED.pinMask);
	}
	*/
		
	USART_Buffer_Flush();
     a84:	0e 94 91 07 	call	0xf22	; 0xf22 <USART_Buffer_Flush>
	uint8_t greenValue = 0;
	uint8_t blueValue = 127;
	
	rgbLEDs testRGBLED;
	uint16_t testNumber = 12;
	uint8_t testOutput = rgbLEDInit(&testRGBLED, testNumber);
     a88:	6c e0       	ldi	r22, 0x0C	; 12
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	ce 01       	movw	r24, r28
     a8e:	8d 5b       	subi	r24, 0xBD	; 189
     a90:	9f 4f       	sbci	r25, 0xFF	; 255
     a92:	0e 94 8b 00 	call	0x116	; 0x116 <rgbLEDInit>
	
	uint8_t myBrightness = 1;
	setBrightness(myBrightness, &testRGBLED);
     a96:	be 01       	movw	r22, r28
     a98:	6d 5b       	subi	r22, 0xBD	; 189
     a9a:	7f 4f       	sbci	r23, 0xFF	; 255
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	0e 94 25 01 	call	0x24a	; 0x24a <setBrightness>
	for(uint16_t i=0; i<12; i++){
     aa2:	e1 2c       	mov	r14, r1
     aa4:	f1 2c       	mov	r15, r1
		setPixelColor(i, 0, 0, 0, &testRGBLED);
     aa6:	8e 01       	movw	r16, r28
     aa8:	0d 5b       	subi	r16, 0xBD	; 189
     aaa:	1f 4f       	sbci	r17, 0xFF	; 255
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	c7 01       	movw	r24, r14
     ab4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <setPixelColor>
	uint16_t testNumber = 12;
	uint8_t testOutput = rgbLEDInit(&testRGBLED, testNumber);
	
	uint8_t myBrightness = 1;
	setBrightness(myBrightness, &testRGBLED);
	for(uint16_t i=0; i<12; i++){
     ab8:	2f ef       	ldi	r18, 0xFF	; 255
     aba:	e2 1a       	sub	r14, r18
     abc:	f2 0a       	sbc	r15, r18
     abe:	8c e0       	ldi	r24, 0x0C	; 12
     ac0:	e8 16       	cp	r14, r24
     ac2:	f1 04       	cpc	r15, r1
     ac4:	81 f7       	brne	.-32     	; 0xaa6 <main+0xa2>
		setPixelColor(i, 0, 0, 0, &testRGBLED);
	}
	//setPixelColor(0, redValue, greenValue, blueValue, &testRGBLED);
	
	
	rgbLEDshow(testRGBLED.numBytes,(uint8_t *) (testRGBLED.pixels), testRGBLED.pinMask);
     ac6:	b8 01       	movw	r22, r16
     ac8:	6a 5f       	subi	r22, 0xFA	; 250
     aca:	7f 4f       	sbci	r23, 0xFF	; 255
     acc:	e8 96       	adiw	r28, 0x38	; 56
     ace:	4f ad       	ldd	r20, Y+63	; 0x3f
     ad0:	e8 97       	sbiw	r28, 0x38	; 56
     ad2:	27 96       	adiw	r28, 0x07	; 7
     ad4:	8e ad       	ldd	r24, Y+62	; 0x3e
     ad6:	9f ad       	ldd	r25, Y+63	; 0x3f
     ad8:	27 97       	sbiw	r28, 0x07	; 7
     ada:	0e 94 a4 00 	call	0x148	; 0x148 <rgbLEDshow>
	
	for(uint16_t i=0; i<12; i++){
     ade:	e1 2c       	mov	r14, r1
     ae0:	f1 2c       	mov	r15, r1
		setPixelColor(i, redValue, greenValue, blueValue, &testRGBLED);
     ae2:	8e 01       	movw	r16, r28
     ae4:	0d 5b       	subi	r16, 0xBD	; 189
     ae6:	1f 4f       	sbci	r17, 0xFF	; 255
     ae8:	2f e7       	ldi	r18, 0x7F	; 127
     aea:	40 e0       	ldi	r20, 0x00	; 0
     aec:	60 e8       	ldi	r22, 0x80	; 128
     aee:	c7 01       	movw	r24, r14
     af0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <setPixelColor>
	//setPixelColor(0, redValue, greenValue, blueValue, &testRGBLED);
	
	
	rgbLEDshow(testRGBLED.numBytes,(uint8_t *) (testRGBLED.pixels), testRGBLED.pinMask);
	
	for(uint16_t i=0; i<12; i++){
     af4:	9f ef       	ldi	r25, 0xFF	; 255
     af6:	e9 1a       	sub	r14, r25
     af8:	f9 0a       	sbc	r15, r25
     afa:	ac e0       	ldi	r26, 0x0C	; 12
     afc:	ea 16       	cp	r14, r26
     afe:	f1 04       	cpc	r15, r1
     b00:	81 f7       	brne	.-32     	; 0xae2 <main+0xde>
		setPixelColor(i, redValue, greenValue, blueValue, &testRGBLED);
	}
	setBrightness(myBrightness, &testRGBLED);
     b02:	b8 01       	movw	r22, r16
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	0e 94 25 01 	call	0x24a	; 0x24a <setBrightness>
	rgbLEDshow(testRGBLED.numBytes,(uint8_t *) (testRGBLED.pixels), testRGBLED.pinMask);
     b0a:	b8 01       	movw	r22, r16
     b0c:	6a 5f       	subi	r22, 0xFA	; 250
     b0e:	7f 4f       	sbci	r23, 0xFF	; 255
     b10:	e8 96       	adiw	r28, 0x38	; 56
     b12:	4f ad       	ldd	r20, Y+63	; 0x3f
     b14:	e8 97       	sbiw	r28, 0x38	; 56
     b16:	27 96       	adiw	r28, 0x07	; 7
     b18:	8e ad       	ldd	r24, Y+62	; 0x3e
     b1a:	9f ad       	ldd	r25, Y+63	; 0x3f
     b1c:	27 97       	sbiw	r28, 0x07	; 7
     b1e:	0e 94 a4 00 	call	0x148	; 0x148 <rgbLEDshow>
	
	rgbLEDs testRGBLED;
	uint16_t testNumber = 12;
	uint8_t testOutput = rgbLEDInit(&testRGBLED, testNumber);
	
	uint8_t myBrightness = 1;
     b22:	b1 e0       	ldi	r27, 0x01	; 1
     b24:	eb 96       	adiw	r28, 0x3b	; 59
     b26:	bf af       	std	Y+63, r27	; 0x3f
     b28:	eb 97       	sbiw	r28, 0x3b	; 59
	uint8_t printBufferOut0 = 0;
	uint8_t printBufferOut1 = 0;
	uint8_t printBufferOut2 = 0;
	uint8_t printBufferOut3 = 0;
	uint8_t colourUpdater = 0;
	uint8_t redValue = 128;
     b2a:	68 94       	set
     b2c:	44 24       	eor	r4, r4
     b2e:	47 f8       	bld	r4, 7
	USART_Buffer_Flush();
	uint8_t printBufferOut0 = 0;
	uint8_t printBufferOut1 = 0;
	uint8_t printBufferOut2 = 0;
	uint8_t printBufferOut3 = 0;
	uint8_t colourUpdater = 0;
     b30:	71 2c       	mov	r7, r1
			uartIn = 0;
			//bluTest2 = 0;
			//USART_Buffer_Flush();
		}*/
		
		if(usartRingBuff.count != 0){
     b32:	0f 2e       	mov	r0, r31
     b34:	f1 e6       	ldi	r31, 0x61	; 97
     b36:	cf 2e       	mov	r12, r31
     b38:	f5 e0       	ldi	r31, 0x05	; 5
     b3a:	df 2e       	mov	r13, r31
     b3c:	f0 2d       	mov	r31, r0
					//myValue = floatToString((float)colourUpdater, myBuffer, (uint8_t) 0);
					//multilineScrollPrint(myValue, (uint16_t) 3);
					//refreshDisplay();
					
					for(uint16_t i=0; i<12; i++){
						setPixelColor(i, redValue, greenValue, blueValue, &testRGBLED);
     b3e:	58 01       	movw	r10, r16
     b40:	e9 96       	adiw	r28, 0x39	; 57
     b42:	0f af       	std	Y+63, r16	; 0x3f
     b44:	e9 97       	sbiw	r28, 0x39	; 57
     b46:	ea 96       	adiw	r28, 0x3a	; 58
     b48:	bf ae       	std	Y+63, r11	; 0x3f
     b4a:	ea 97       	sbiw	r28, 0x3a	; 58
					
				}else if(printBufferOut0 ==5){
					//turn light on and off
					
				}*/
				rgbLEDshow(testRGBLED.numBytes,(uint8_t *) (testRGBLED.pixels), testRGBLED.pinMask);
     b4c:	c8 01       	movw	r24, r16
     b4e:	06 96       	adiw	r24, 0x06	; 6
     b50:	4c 01       	movw	r8, r24
					redValue = colourUpdater;
					//myValue = floatToString((float)colourUpdater, myBuffer, (uint8_t) 0);
					//multilineScrollPrint(myValue, (uint16_t) 3);
					//refreshDisplay();
					
					for(uint16_t i=0; i<12; i++){
     b52:	31 2c       	mov	r3, r1
     b54:	21 2c       	mov	r2, r1
						setPixelColor(i, redValue, greenValue, blueValue, &testRGBLED);
     b56:	50 2e       	mov	r5, r16
     b58:	6b 2c       	mov	r6, r11
			uartIn = 0;
			//bluTest2 = 0;
			//USART_Buffer_Flush();
		}*/
		
		if(usartRingBuff.count != 0){
     b5a:	d6 01       	movw	r26, r12
     b5c:	8c 91       	ld	r24, X
     b5e:	88 23       	and	r24, r24
     b60:	09 f4       	brne	.+2      	; 0xb64 <main+0x160>
     b62:	58 c0       	rjmp	.+176    	; 0xc14 <main+0x210>
			while(usartRingBuff.count > 0){
     b64:	8c 91       	ld	r24, X
     b66:	88 23       	and	r24, r24
     b68:	09 f4       	brne	.+2      	; 0xb6c <main+0x168>
     b6a:	54 c0       	rjmp	.+168    	; 0xc14 <main+0x210>
				
				
				printBufferOut0 = ringBuffGet_v(&usartRingBuff);
     b6c:	8f e3       	ldi	r24, 0x3F	; 63
     b6e:	95 e0       	ldi	r25, 0x05	; 5
     b70:	0e 94 26 07 	call	0xe4c	; 0xe4c <ringBuffGet_v>
				//myValue = floatToString((float)printBufferOut0, myBuffer, (uint8_t) 0);
				//multilineScrollPrint(myValue, (uint16_t) 3);
				//refreshDisplay();
				
				
				if(printBufferOut0 == 1){
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	69 f5       	brne	.+90     	; 0xbd2 <main+0x1ce>
					//update red values
					//values are given as input = 2n+m
					//n is the first value given and m is the second value given.
					while(usartRingBuff.count == 0){}//wait for buffer to fill 
     b78:	f6 01       	movw	r30, r12
     b7a:	80 81       	ld	r24, Z
     b7c:	88 23       	and	r24, r24
     b7e:	e1 f3       	breq	.-8      	; 0xb78 <main+0x174>
					printBufferOut0 = ringBuffGet_v(&usartRingBuff);
     b80:	8f e3       	ldi	r24, 0x3F	; 63
     b82:	95 e0       	ldi	r25, 0x05	; 5
     b84:	0e 94 26 07 	call	0xe4c	; 0xe4c <ringBuffGet_v>
					colourUpdater = printBufferOut0 + printBufferOut0;
     b88:	78 2e       	mov	r7, r24
     b8a:	77 0c       	add	r7, r7
					while(usartRingBuff.count == 0){}
     b8c:	d6 01       	movw	r26, r12
     b8e:	9c 91       	ld	r25, X
     b90:	99 23       	and	r25, r25
     b92:	e1 f3       	breq	.-8      	; 0xb8c <main+0x188>
					printBufferOut0 = ringBuffGet_v(&usartRingBuff);
     b94:	8f e3       	ldi	r24, 0x3F	; 63
     b96:	95 e0       	ldi	r25, 0x05	; 5
     b98:	0e 94 26 07 	call	0xe4c	; 0xe4c <ringBuffGet_v>
					colourUpdater = colourUpdater + printBufferOut0;
     b9c:	78 0e       	add	r7, r24
					while(usartRingBuff.count == 0){}
     b9e:	f6 01       	movw	r30, r12
     ba0:	80 81       	ld	r24, Z
     ba2:	88 23       	and	r24, r24
     ba4:	e1 f3       	breq	.-8      	; 0xb9e <main+0x19a>
					printBufferOut0 = ringBuffGet_v(&usartRingBuff); //get the zero out of the buffer.
     ba6:	8f e3       	ldi	r24, 0x3F	; 63
     ba8:	95 e0       	ldi	r25, 0x05	; 5
     baa:	0e 94 26 07 	call	0xe4c	; 0xe4c <ringBuffGet_v>
					redValue = colourUpdater;
					//myValue = floatToString((float)colourUpdater, myBuffer, (uint8_t) 0);
					//multilineScrollPrint(myValue, (uint16_t) 3);
					//refreshDisplay();
					
					for(uint16_t i=0; i<12; i++){
     bae:	e3 2c       	mov	r14, r3
     bb0:	f2 2c       	mov	r15, r2
						setPixelColor(i, redValue, greenValue, blueValue, &testRGBLED);
     bb2:	05 2d       	mov	r16, r5
     bb4:	16 2d       	mov	r17, r6
     bb6:	2f e7       	ldi	r18, 0x7F	; 127
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	67 2d       	mov	r22, r7
     bbc:	c7 01       	movw	r24, r14
     bbe:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <setPixelColor>
					redValue = colourUpdater;
					//myValue = floatToString((float)colourUpdater, myBuffer, (uint8_t) 0);
					//multilineScrollPrint(myValue, (uint16_t) 3);
					//refreshDisplay();
					
					for(uint16_t i=0; i<12; i++){
     bc2:	ff ef       	ldi	r31, 0xFF	; 255
     bc4:	ef 1a       	sub	r14, r31
     bc6:	ff 0a       	sbc	r15, r31
     bc8:	2c e0       	ldi	r18, 0x0C	; 12
     bca:	e2 16       	cp	r14, r18
     bcc:	f1 04       	cpc	r15, r1
     bce:	89 f7       	brne	.-30     	; 0xbb2 <main+0x1ae>
					while(usartRingBuff.count == 0){}
					printBufferOut0 = ringBuffGet_v(&usartRingBuff);
					colourUpdater = colourUpdater + printBufferOut0;
					while(usartRingBuff.count == 0){}
					printBufferOut0 = ringBuffGet_v(&usartRingBuff); //get the zero out of the buffer.
					redValue = colourUpdater;
     bd0:	47 2c       	mov	r4, r7
					
				}else if(printBufferOut0 ==5){
					//turn light on and off
					
				}*/
				rgbLEDshow(testRGBLED.numBytes,(uint8_t *) (testRGBLED.pixels), testRGBLED.pinMask);
     bd2:	d5 01       	movw	r26, r10
     bd4:	d4 96       	adiw	r26, 0x34	; 52
     bd6:	4c 91       	ld	r20, X
     bd8:	d4 97       	sbiw	r26, 0x34	; 52
     bda:	b4 01       	movw	r22, r8
     bdc:	12 96       	adiw	r26, 0x02	; 2
     bde:	8d 91       	ld	r24, X+
     be0:	9c 91       	ld	r25, X
     be2:	13 97       	sbiw	r26, 0x03	; 3
     be4:	0e 94 a4 00 	call	0x148	; 0x148 <rgbLEDshow>
				//used for debugging:
				myValue = floatToString((float)colourUpdater, myBuffer, (uint8_t) 0);
     be8:	67 2d       	mov	r22, r7
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__floatunsisf>
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	ae 01       	movw	r20, r28
     bf8:	4e 5f       	subi	r20, 0xFE	; 254
     bfa:	5f 4f       	sbci	r21, 0xFF	; 255
     bfc:	0e 94 da 03 	call	0x7b4	; 0x7b4 <floatToString>
				multilineScrollPrint(myValue, (uint16_t) 3);
     c00:	63 e0       	ldi	r22, 0x03	; 3
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	0e 94 bc 03 	call	0x778	; 0x778 <multilineScrollPrint>
				refreshDisplay();
     c08:	0e 94 34 02 	call	0x468	; 0x468 <refreshDisplay>
			//bluTest2 = 0;
			//USART_Buffer_Flush();
		}*/
		
		if(usartRingBuff.count != 0){
			while(usartRingBuff.count > 0){
     c0c:	f6 01       	movw	r30, r12
     c0e:	80 81       	ld	r24, Z
     c10:	81 11       	cpse	r24, r1
     c12:	ac cf       	rjmp	.-168    	; 0xb6c <main+0x168>
			}			
		}
		
		
		
		if(encoderTurned == 1){
     c14:	80 91 3d 05 	lds	r24, 0x053D
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	09 f0       	breq	.+2      	; 0xc1e <main+0x21a>
     c1c:	9e cf       	rjmp	.-196    	; 0xb5a <main+0x156>
			if(encoderDirection == 1){
     c1e:	80 91 3e 05 	lds	r24, 0x053E
     c22:	81 30       	cpi	r24, 0x01	; 1
     c24:	09 f0       	breq	.+2      	; 0xc28 <main+0x224>
     c26:	52 c0       	rjmp	.+164    	; 0xccc <main+0x2c8>
				//lower brightness
				(myBrightness > 1 ) ? (myBrightness-=5) : (myBrightness = 1);
     c28:	eb 96       	adiw	r28, 0x3b	; 59
     c2a:	ff ad       	ldd	r31, Y+63	; 0x3f
     c2c:	eb 97       	sbiw	r28, 0x3b	; 59
     c2e:	f2 30       	cpi	r31, 0x02	; 2
     c30:	38 f0       	brcs	.+14     	; 0xc40 <main+0x23c>
     c32:	f5 50       	subi	r31, 0x05	; 5
     c34:	eb 96       	adiw	r28, 0x3b	; 59
     c36:	ff af       	std	Y+63, r31	; 0x3f
     c38:	eb 97       	sbiw	r28, 0x3b	; 59
				if(myBrightness == 0){myBrightness = 1;}
     c3a:	ff 23       	and	r31, r31
     c3c:	31 f0       	breq	.+12     	; 0xc4a <main+0x246>
     c3e:	09 c0       	rjmp	.+18     	; 0xc52 <main+0x24e>
		
		
		if(encoderTurned == 1){
			if(encoderDirection == 1){
				//lower brightness
				(myBrightness > 1 ) ? (myBrightness-=5) : (myBrightness = 1);
     c40:	21 e0       	ldi	r18, 0x01	; 1
     c42:	eb 96       	adiw	r28, 0x3b	; 59
     c44:	2f af       	std	Y+63, r18	; 0x3f
     c46:	eb 97       	sbiw	r28, 0x3b	; 59
     c48:	04 c0       	rjmp	.+8      	; 0xc52 <main+0x24e>
				if(myBrightness == 0){myBrightness = 1;}
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	eb 96       	adiw	r28, 0x3b	; 59
     c4e:	8f af       	std	Y+63, r24	; 0x3f
     c50:	eb 97       	sbiw	r28, 0x3b	; 59
				setBrightness(myBrightness, &testRGBLED);
     c52:	e9 96       	adiw	r28, 0x39	; 57
     c54:	6f ad       	ldd	r22, Y+63	; 0x3f
     c56:	e9 97       	sbiw	r28, 0x39	; 57
     c58:	ea 96       	adiw	r28, 0x3a	; 58
     c5a:	7f ad       	ldd	r23, Y+63	; 0x3f
     c5c:	ea 97       	sbiw	r28, 0x3a	; 58
     c5e:	eb 96       	adiw	r28, 0x3b	; 59
     c60:	8f ad       	ldd	r24, Y+63	; 0x3f
     c62:	eb 97       	sbiw	r28, 0x3b	; 59
     c64:	0e 94 25 01 	call	0x24a	; 0x24a <setBrightness>
				//update colours with brightness, if not then colours that have a 
				//value less than 128 will not appear on higher brightness.
				//colours not appearing only happens at a brightness of 1.
				for(uint16_t i=0; i<12; i++){
     c68:	e1 2c       	mov	r14, r1
     c6a:	f1 2c       	mov	r15, r1
					setPixelColor(i, redValue, greenValue, blueValue, &testRGBLED);
     c6c:	e9 96       	adiw	r28, 0x39	; 57
     c6e:	0f ad       	ldd	r16, Y+63	; 0x3f
     c70:	e9 97       	sbiw	r28, 0x39	; 57
     c72:	ea 96       	adiw	r28, 0x3a	; 58
     c74:	1f ad       	ldd	r17, Y+63	; 0x3f
     c76:	ea 97       	sbiw	r28, 0x3a	; 58
     c78:	2f e7       	ldi	r18, 0x7F	; 127
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	64 2d       	mov	r22, r4
     c7e:	c7 01       	movw	r24, r14
     c80:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <setPixelColor>
				if(myBrightness == 0){myBrightness = 1;}
				setBrightness(myBrightness, &testRGBLED);
				//update colours with brightness, if not then colours that have a 
				//value less than 128 will not appear on higher brightness.
				//colours not appearing only happens at a brightness of 1.
				for(uint16_t i=0; i<12; i++){
     c84:	9f ef       	ldi	r25, 0xFF	; 255
     c86:	e9 1a       	sub	r14, r25
     c88:	f9 0a       	sbc	r15, r25
     c8a:	ac e0       	ldi	r26, 0x0C	; 12
     c8c:	ea 16       	cp	r14, r26
     c8e:	f1 04       	cpc	r15, r1
     c90:	69 f7       	brne	.-38     	; 0xc6c <main+0x268>
					setPixelColor(i, redValue, greenValue, blueValue, &testRGBLED);
				}
				rgbLEDshow(testRGBLED.numBytes,(uint8_t *) (testRGBLED.pixels), testRGBLED.pinMask);
     c92:	f5 01       	movw	r30, r10
     c94:	44 a9       	ldd	r20, Z+52	; 0x34
     c96:	b4 01       	movw	r22, r8
     c98:	82 81       	ldd	r24, Z+2	; 0x02
     c9a:	93 81       	ldd	r25, Z+3	; 0x03
     c9c:	0e 94 a4 00 	call	0x148	; 0x148 <rgbLEDshow>
				
				//encoderCounter++;
				myValue = floatToString((float)myBrightness, myBuffer, (uint8_t) 0);
     ca0:	eb 96       	adiw	r28, 0x3b	; 59
     ca2:	ff ad       	ldd	r31, Y+63	; 0x3f
     ca4:	eb 97       	sbiw	r28, 0x3b	; 59
     ca6:	6f 2f       	mov	r22, r31
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__floatunsisf>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	ae 01       	movw	r20, r28
     cb6:	4e 5f       	subi	r20, 0xFE	; 254
     cb8:	5f 4f       	sbci	r21, 0xFF	; 255
     cba:	0e 94 da 03 	call	0x7b4	; 0x7b4 <floatToString>
				multilineScrollPrint(myValue, (uint16_t) 3);
     cbe:	63 e0       	ldi	r22, 0x03	; 3
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	0e 94 bc 03 	call	0x778	; 0x778 <multilineScrollPrint>
				//multilineScrollPrint("0", (uint16_t) 1); //0 for counter-clockwise
				refreshDisplay();
     cc6:	0e 94 34 02 	call	0x468	; 0x468 <refreshDisplay>
     cca:	51 c0       	rjmp	.+162    	; 0xd6e <main+0x36a>
			}else{
				//turn brightness up
				(myBrightness < 251) ? (myBrightness+=5) : (myBrightness = 255);
     ccc:	eb 96       	adiw	r28, 0x3b	; 59
     cce:	2f ad       	ldd	r18, Y+63	; 0x3f
     cd0:	eb 97       	sbiw	r28, 0x3b	; 59
     cd2:	2b 3f       	cpi	r18, 0xFB	; 251
     cd4:	38 f4       	brcc	.+14     	; 0xce4 <main+0x2e0>
     cd6:	2b 5f       	subi	r18, 0xFB	; 251
     cd8:	eb 96       	adiw	r28, 0x3b	; 59
     cda:	2f af       	std	Y+63, r18	; 0x3f
     cdc:	eb 97       	sbiw	r28, 0x3b	; 59
				if(myBrightness == 0){myBrightness = 1;}
     cde:	22 23       	and	r18, r18
     ce0:	31 f0       	breq	.+12     	; 0xcee <main+0x2ea>
     ce2:	09 c0       	rjmp	.+18     	; 0xcf6 <main+0x2f2>
				multilineScrollPrint(myValue, (uint16_t) 3);
				//multilineScrollPrint("0", (uint16_t) 1); //0 for counter-clockwise
				refreshDisplay();
			}else{
				//turn brightness up
				(myBrightness < 251) ? (myBrightness+=5) : (myBrightness = 255);
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	eb 96       	adiw	r28, 0x3b	; 59
     ce8:	8f af       	std	Y+63, r24	; 0x3f
     cea:	eb 97       	sbiw	r28, 0x3b	; 59
     cec:	04 c0       	rjmp	.+8      	; 0xcf6 <main+0x2f2>
				if(myBrightness == 0){myBrightness = 1;}
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	eb 96       	adiw	r28, 0x3b	; 59
     cf2:	9f af       	std	Y+63, r25	; 0x3f
     cf4:	eb 97       	sbiw	r28, 0x3b	; 59
				setBrightness(myBrightness, &testRGBLED);
     cf6:	e9 96       	adiw	r28, 0x39	; 57
     cf8:	6f ad       	ldd	r22, Y+63	; 0x3f
     cfa:	e9 97       	sbiw	r28, 0x39	; 57
     cfc:	ea 96       	adiw	r28, 0x3a	; 58
     cfe:	7f ad       	ldd	r23, Y+63	; 0x3f
     d00:	ea 97       	sbiw	r28, 0x3a	; 58
     d02:	eb 96       	adiw	r28, 0x3b	; 59
     d04:	8f ad       	ldd	r24, Y+63	; 0x3f
     d06:	eb 97       	sbiw	r28, 0x3b	; 59
     d08:	0e 94 25 01 	call	0x24a	; 0x24a <setBrightness>
				for(uint16_t i=0; i<12; i++){
     d0c:	e1 2c       	mov	r14, r1
     d0e:	f1 2c       	mov	r15, r1
					setPixelColor(i, redValue, greenValue, blueValue, &testRGBLED);
     d10:	e9 96       	adiw	r28, 0x39	; 57
     d12:	0f ad       	ldd	r16, Y+63	; 0x3f
     d14:	e9 97       	sbiw	r28, 0x39	; 57
     d16:	ea 96       	adiw	r28, 0x3a	; 58
     d18:	1f ad       	ldd	r17, Y+63	; 0x3f
     d1a:	ea 97       	sbiw	r28, 0x3a	; 58
     d1c:	2f e7       	ldi	r18, 0x7F	; 127
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	64 2d       	mov	r22, r4
     d22:	c7 01       	movw	r24, r14
     d24:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <setPixelColor>
			}else{
				//turn brightness up
				(myBrightness < 251) ? (myBrightness+=5) : (myBrightness = 255);
				if(myBrightness == 0){myBrightness = 1;}
				setBrightness(myBrightness, &testRGBLED);
				for(uint16_t i=0; i<12; i++){
     d28:	af ef       	ldi	r26, 0xFF	; 255
     d2a:	ea 1a       	sub	r14, r26
     d2c:	fa 0a       	sbc	r15, r26
     d2e:	bc e0       	ldi	r27, 0x0C	; 12
     d30:	eb 16       	cp	r14, r27
     d32:	f1 04       	cpc	r15, r1
     d34:	69 f7       	brne	.-38     	; 0xd10 <main+0x30c>
					setPixelColor(i, redValue, greenValue, blueValue, &testRGBLED);
				}
				rgbLEDshow(testRGBLED.numBytes,(uint8_t *) (testRGBLED.pixels), testRGBLED.pinMask);
     d36:	f5 01       	movw	r30, r10
     d38:	44 a9       	ldd	r20, Z+52	; 0x34
     d3a:	b4 01       	movw	r22, r8
     d3c:	82 81       	ldd	r24, Z+2	; 0x02
     d3e:	93 81       	ldd	r25, Z+3	; 0x03
     d40:	0e 94 a4 00 	call	0x148	; 0x148 <rgbLEDshow>
				
				//encoderCounter--;
				myValue = floatToString((float)myBrightness, myBuffer, (uint8_t) 0);
     d44:	eb 96       	adiw	r28, 0x3b	; 59
     d46:	ff ad       	ldd	r31, Y+63	; 0x3f
     d48:	eb 97       	sbiw	r28, 0x3b	; 59
     d4a:	6f 2f       	mov	r22, r31
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__floatunsisf>
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	ae 01       	movw	r20, r28
     d5a:	4e 5f       	subi	r20, 0xFE	; 254
     d5c:	5f 4f       	sbci	r21, 0xFF	; 255
     d5e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <floatToString>
				multilineScrollPrint(myValue, (uint16_t) 3);
     d62:	63 e0       	ldi	r22, 0x03	; 3
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	0e 94 bc 03 	call	0x778	; 0x778 <multilineScrollPrint>
				//multilineScrollPrint("1", (uint16_t) 1);	//1 for clockwise
				refreshDisplay();
     d6a:	0e 94 34 02 	call	0x468	; 0x468 <refreshDisplay>
			}
			encoderTurned = 0;
     d6e:	10 92 3d 05 	sts	0x053D, r1
     d72:	f3 ce       	rjmp	.-538    	; 0xb5a <main+0x156>

00000d74 <__vector_5>:
	
	return 0;
}

//interrupt needs to be here
ISR(PCINT2_vect){
     d74:	1f 92       	push	r1
     d76:	0f 92       	push	r0
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
     d7e:	2f 93       	push	r18
     d80:	3f 93       	push	r19
     d82:	4f 93       	push	r20
     d84:	5f 93       	push	r21
     d86:	6f 93       	push	r22
     d88:	7f 93       	push	r23
     d8a:	8f 93       	push	r24
     d8c:	9f 93       	push	r25
     d8e:	af 93       	push	r26
     d90:	bf 93       	push	r27
     d92:	ef 93       	push	r30
     d94:	ff 93       	push	r31
	if(readEncOutputA()==1){
     d96:	0e 94 62 07 	call	0xec4	; 0xec4 <readEncOutputA>
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	29 f4       	brne	.+10     	; 0xda8 <__vector_5+0x34>
		encoderDirection = readEncOutputB();
     d9e:	0e 94 67 07 	call	0xece	; 0xece <readEncOutputB>
     da2:	80 93 3e 05 	sts	0x053E, r24
     da6:	07 c0       	rjmp	.+14     	; 0xdb6 <__vector_5+0x42>
	}else{
		encoderDirection = !(readEncOutputB());
     da8:	0e 94 67 07 	call	0xece	; 0xece <readEncOutputB>
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	81 11       	cpse	r24, r1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	90 93 3e 05 	sts	0x053E, r25
	if(encoderDirection == 1){
		encoderCounter++;
	}else{
		encoderCounter--;
	}*/
	encoderTurned = 1;
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	80 93 3d 05 	sts	0x053D, r24
}
     dbc:	ff 91       	pop	r31
     dbe:	ef 91       	pop	r30
     dc0:	bf 91       	pop	r27
     dc2:	af 91       	pop	r26
     dc4:	9f 91       	pop	r25
     dc6:	8f 91       	pop	r24
     dc8:	7f 91       	pop	r23
     dca:	6f 91       	pop	r22
     dcc:	5f 91       	pop	r21
     dce:	4f 91       	pop	r20
     dd0:	3f 91       	pop	r19
     dd2:	2f 91       	pop	r18
     dd4:	0f 90       	pop	r0
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	0f 90       	pop	r0
     dda:	1f 90       	pop	r1
     ddc:	18 95       	reti

00000dde <__vector_18>:

ISR(USART_RX_vect){
     dde:	1f 92       	push	r1
     de0:	0f 92       	push	r0
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	0f 92       	push	r0
     de6:	11 24       	eor	r1, r1
     de8:	2f 93       	push	r18
     dea:	3f 93       	push	r19
     dec:	4f 93       	push	r20
     dee:	5f 93       	push	r21
     df0:	6f 93       	push	r22
     df2:	7f 93       	push	r23
     df4:	8f 93       	push	r24
     df6:	9f 93       	push	r25
     df8:	af 93       	push	r26
     dfa:	bf 93       	push	r27
     dfc:	ef 93       	push	r30
     dfe:	ff 93       	push	r31
	ringBuffPut_v(&usartRingBuff, UDR0);
     e00:	60 91 c6 00 	lds	r22, 0x00C6
     e04:	8f e3       	ldi	r24, 0x3F	; 63
     e06:	95 e0       	ldi	r25, 0x05	; 5
     e08:	0e 94 3d 07 	call	0xe7a	; 0xe7a <ringBuffPut_v>
	uartIn = 1;	
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	80 93 3c 05 	sts	0x053C, r24
}
     e12:	ff 91       	pop	r31
     e14:	ef 91       	pop	r30
     e16:	bf 91       	pop	r27
     e18:	af 91       	pop	r26
     e1a:	9f 91       	pop	r25
     e1c:	8f 91       	pop	r24
     e1e:	7f 91       	pop	r23
     e20:	6f 91       	pop	r22
     e22:	5f 91       	pop	r21
     e24:	4f 91       	pop	r20
     e26:	3f 91       	pop	r19
     e28:	2f 91       	pop	r18
     e2a:	0f 90       	pop	r0
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	0f 90       	pop	r0
     e30:	1f 90       	pop	r1
     e32:	18 95       	reti

00000e34 <ringBuffInit>:


void ringBuffInit(ringBuffer *_this){
	//set buffer elements to zero.
	//also sets head, tail, and count to zero.
	memset(_this, 0, sizeof(*_this));
     e34:	23 e2       	ldi	r18, 0x23	; 35
     e36:	fc 01       	movw	r30, r24
     e38:	11 92       	st	Z+, r1
     e3a:	2a 95       	dec	r18
     e3c:	e9 f7       	brne	.-6      	; 0xe38 <ringBuffInit+0x4>
     e3e:	08 95       	ret

00000e40 <ringBuffInit_v>:

//voltile buffer functions////////////////////////////
void ringBuffInit_v(volatile ringBuffer *_this){
	//set buffer elements to zero.
	//also sets head, tail, and count to zero.
	memset((void*)_this, 0, sizeof(*_this));
     e40:	23 e2       	ldi	r18, 0x23	; 35
     e42:	fc 01       	movw	r30, r24
     e44:	11 92       	st	Z+, r1
     e46:	2a 95       	dec	r18
     e48:	e9 f7       	brne	.-6      	; 0xe44 <ringBuffInit_v+0x4>
     e4a:	08 95       	ret

00000e4c <ringBuffGet_v>:
uint8_t ringBuffFull_v(volatile ringBuffer *_this){
	return(_this->count >= RBUFF_SIZE);
}

//if queue is empty then return -1
uint8_t ringBuffGet_v(volatile ringBuffer *_this){
     e4c:	fc 01       	movw	r30, r24
	int c;
	if(_this->count > 0){
     e4e:	82 a1       	ldd	r24, Z+34	; 0x22
     e50:	88 23       	and	r24, r24
     e52:	81 f0       	breq	.+32     	; 0xe74 <ringBuffGet_v+0x28>
		c = _this->buff[_this->tail];
     e54:	81 a1       	ldd	r24, Z+33	; 0x21
     e56:	df 01       	movw	r26, r30
     e58:	a8 0f       	add	r26, r24
     e5a:	b1 1d       	adc	r27, r1
     e5c:	8c 91       	ld	r24, X
		//rollover counter.  Once the counter reaches
		// RBUFF_SIZE, then the counter goes to zero.
		_this->tail = (_this->tail+1)%RBUFF_SIZE;
     e5e:	21 a1       	ldd	r18, Z+33	; 0x21
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	2f 5f       	subi	r18, 0xFF	; 255
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	2f 71       	andi	r18, 0x1F	; 31
     e68:	30 78       	andi	r19, 0x80	; 128
     e6a:	21 a3       	std	Z+33, r18	; 0x21
		--_this->count;
     e6c:	22 a1       	ldd	r18, Z+34	; 0x22
     e6e:	21 50       	subi	r18, 0x01	; 1
     e70:	22 a3       	std	Z+34, r18	; 0x22
     e72:	08 95       	ret
		}else{
		c=-1;
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return (c);
}
     e78:	08 95       	ret

00000e7a <ringBuffPut_v>:

void ringBuffPut_v(volatile ringBuffer *_this, const uint8_t c){
     e7a:	fc 01       	movw	r30, r24
	if(_this->count < RBUFF_SIZE){
     e7c:	82 a1       	ldd	r24, Z+34	; 0x22
     e7e:	80 32       	cpi	r24, 0x20	; 32
     e80:	78 f4       	brcc	.+30     	; 0xea0 <ringBuffPut_v+0x26>
		_this->buff[_this->head] = c;
     e82:	80 a1       	ldd	r24, Z+32	; 0x20
     e84:	df 01       	movw	r26, r30
     e86:	a8 0f       	add	r26, r24
     e88:	b1 1d       	adc	r27, r1
     e8a:	6c 93       	st	X, r22
		_this->head = (_this->head+1)%RBUFF_SIZE;
     e8c:	80 a1       	ldd	r24, Z+32	; 0x20
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	8f 71       	andi	r24, 0x1F	; 31
     e94:	90 78       	andi	r25, 0x80	; 128
     e96:	80 a3       	std	Z+32, r24	; 0x20
		++_this->count;
     e98:	82 a1       	ldd	r24, Z+34	; 0x22
     e9a:	8f 5f       	subi	r24, 0xFF	; 255
     e9c:	82 a3       	std	Z+34, r24	; 0x22
     e9e:	08 95       	ret
	}
	//keep this if you want to overwrite the buffer when the buffer is full
	//comment out else statement to lose data when buffer is full.
	else{
		_this->buff[_this->head] = c;
     ea0:	80 a1       	ldd	r24, Z+32	; 0x20
     ea2:	df 01       	movw	r26, r30
     ea4:	a8 0f       	add	r26, r24
     ea6:	b1 1d       	adc	r27, r1
     ea8:	6c 93       	st	X, r22
		_this->head = (_this->head+1)%RBUFF_SIZE;
     eaa:	80 a1       	ldd	r24, Z+32	; 0x20
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	01 96       	adiw	r24, 0x01	; 1
     eb0:	8f 71       	andi	r24, 0x1F	; 31
     eb2:	90 78       	andi	r25, 0x80	; 128
     eb4:	80 a3       	std	Z+32, r24	; 0x20
		_this->tail = (_this->tail+1)%RBUFF_SIZE;
     eb6:	81 a1       	ldd	r24, Z+33	; 0x21
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	01 96       	adiw	r24, 0x01	; 1
     ebc:	8f 71       	andi	r24, 0x1F	; 31
     ebe:	90 78       	andi	r25, 0x80	; 128
     ec0:	81 a3       	std	Z+33, r24	; 0x21
     ec2:	08 95       	ret

00000ec4 <readEncOutputA>:
	return;
}

uint8_t readEncOutputA(){
	//return PIND & (1<<PD5);
	if(PIND & (1<<PD5)){
     ec4:	89 b1       	in	r24, 0x09	; 9
		return 0b00000001;
	}
	return 0b00000000;
}
     ec6:	85 fb       	bst	r24, 5
     ec8:	88 27       	eor	r24, r24
     eca:	80 f9       	bld	r24, 0
     ecc:	08 95       	ret

00000ece <readEncOutputB>:
uint8_t readEncOutputB(){
	//return PIND & (1<<PD6);
	if(PIND & (1<<PD6)){
     ece:	89 b1       	in	r24, 0x09	; 9
		return 0b00000001;
	}
	return 0b00000000;
}
     ed0:	86 fb       	bst	r24, 6
     ed2:	88 27       	eor	r24, r24
     ed4:	80 f9       	bld	r24, 0
     ed6:	08 95       	ret

00000ed8 <encoderInitWithInt>:
//volatile uint8_t upInt;



void encoderInitWithInt(){
	DDRD &= ~((1<<DDB5)|(1<<DDB6)|(1<<DDB7));	//set pins 5, 6, 7 to inputs.
     ed8:	8a b1       	in	r24, 0x0a	; 10
     eda:	8f 71       	andi	r24, 0x1F	; 31
     edc:	8a b9       	out	0x0a, r24	; 10
							//doesnt need pullups for 5 and 6, since there are hardware ones.
	PORTD |=(1<<PORTD7);//enable pullup on pin PD7
     ede:	5f 9a       	sbi	0x0b, 7	; 11
	//DDRD &= ~(DDB5);
	//enable interrupts on PD5 (pin 11/PCINT21/OC0B/T1)
	PCICR |= (1<<PCIE2); //enable interrupts on PCINT[23 to 16]
     ee0:	e8 e6       	ldi	r30, 0x68	; 104
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	84 60       	ori	r24, 0x04	; 4
     ee8:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT21); //enable interrupts on PCINT21
     eea:	ed e6       	ldi	r30, 0x6D	; 109
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	80 62       	ori	r24, 0x20	; 32
     ef2:	80 83       	st	Z, r24
	sei(); //enables global interrupts				
     ef4:	78 94       	sei
     ef6:	08 95       	ret

00000ef8 <Init_USART>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	80 e8       	ldi	r24, 0x80	; 128
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	80 93 61 00 	sts	0x0061, r24
     f04:	90 93 61 00 	sts	0x0061, r25
     f08:	0f be       	out	0x3f, r0	; 63

#include "include.h"

void Init_USART(void){
	clock_prescale_set(clock_div_1);
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //Enables the USART transmitter and receiver
     f0a:	88 e1       	ldi	r24, 0x18	; 24
     f0c:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00)|(1<<USBS0); //tells it to send 8bit characters (setting both USCZ01 and UCSZ00 to one)
     f10:	8e e0       	ldi	r24, 0x0E	; 14
     f12:	80 93 c2 00 	sts	0x00C2, r24
	//now it has 2 stop bits.

	UBRR0H = (BAUD_PRESCALE >> 8); //loads the upper 8 bits into the high byte of the UBRR register
     f16:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUD_PRESCALE; //loads the lower 8 bits
     f1a:	83 e3       	ldi	r24, 0x33	; 51
     f1c:	80 93 c4 00 	sts	0x00C4, r24
     f20:	08 95       	ret

00000f22 <USART_Buffer_Flush>:

//This function dumps the receive buffer.  Use this before receiving user input.
void USART_Buffer_Flush(void){
	unsigned char dummy;
	//Read data into dummy char until buffer indicator, RXCn, is 0.
	while ( UCSR0A & (1<<RXC0) ){ dummy = UDR0;}
     f22:	80 91 c0 00 	lds	r24, 0x00C0
     f26:	88 23       	and	r24, r24
     f28:	44 f4       	brge	.+16     	; 0xf3a <USART_Buffer_Flush+0x18>
     f2a:	a6 ec       	ldi	r26, 0xC6	; 198
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e0 ec       	ldi	r30, 0xC0	; 192
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	8c 91       	ld	r24, X
     f34:	80 81       	ld	r24, Z
     f36:	88 23       	and	r24, r24
     f38:	e4 f3       	brlt	.-8      	; 0xf32 <USART_Buffer_Flush+0x10>
     f3a:	08 95       	ret

00000f3c <__cmpsf2>:
     f3c:	6c d0       	rcall	.+216    	; 0x1016 <__fp_cmp>
     f3e:	08 f4       	brcc	.+2      	; 0xf42 <__cmpsf2+0x6>
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	08 95       	ret

00000f44 <__fixunssfsi>:
     f44:	94 d0       	rcall	.+296    	; 0x106e <__fp_splitA>
     f46:	88 f0       	brcs	.+34     	; 0xf6a <__fixunssfsi+0x26>
     f48:	9f 57       	subi	r25, 0x7F	; 127
     f4a:	90 f0       	brcs	.+36     	; 0xf70 <__fixunssfsi+0x2c>
     f4c:	b9 2f       	mov	r27, r25
     f4e:	99 27       	eor	r25, r25
     f50:	b7 51       	subi	r27, 0x17	; 23
     f52:	a0 f0       	brcs	.+40     	; 0xf7c <__fixunssfsi+0x38>
     f54:	d1 f0       	breq	.+52     	; 0xf8a <__fixunssfsi+0x46>
     f56:	66 0f       	add	r22, r22
     f58:	77 1f       	adc	r23, r23
     f5a:	88 1f       	adc	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	1a f0       	brmi	.+6      	; 0xf66 <__fixunssfsi+0x22>
     f60:	ba 95       	dec	r27
     f62:	c9 f7       	brne	.-14     	; 0xf56 <__fixunssfsi+0x12>
     f64:	12 c0       	rjmp	.+36     	; 0xf8a <__fixunssfsi+0x46>
     f66:	b1 30       	cpi	r27, 0x01	; 1
     f68:	81 f0       	breq	.+32     	; 0xf8a <__fixunssfsi+0x46>
     f6a:	9b d0       	rcall	.+310    	; 0x10a2 <__fp_zero>
     f6c:	b1 e0       	ldi	r27, 0x01	; 1
     f6e:	08 95       	ret
     f70:	98 c0       	rjmp	.+304    	; 0x10a2 <__fp_zero>
     f72:	67 2f       	mov	r22, r23
     f74:	78 2f       	mov	r23, r24
     f76:	88 27       	eor	r24, r24
     f78:	b8 5f       	subi	r27, 0xF8	; 248
     f7a:	39 f0       	breq	.+14     	; 0xf8a <__fixunssfsi+0x46>
     f7c:	b9 3f       	cpi	r27, 0xF9	; 249
     f7e:	cc f3       	brlt	.-14     	; 0xf72 <__fixunssfsi+0x2e>
     f80:	86 95       	lsr	r24
     f82:	77 95       	ror	r23
     f84:	67 95       	ror	r22
     f86:	b3 95       	inc	r27
     f88:	d9 f7       	brne	.-10     	; 0xf80 <__fixunssfsi+0x3c>
     f8a:	3e f4       	brtc	.+14     	; 0xf9a <__fixunssfsi+0x56>
     f8c:	90 95       	com	r25
     f8e:	80 95       	com	r24
     f90:	70 95       	com	r23
     f92:	61 95       	neg	r22
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	8f 4f       	sbci	r24, 0xFF	; 255
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	08 95       	ret

00000f9c <__floatunsisf>:
     f9c:	e8 94       	clt
     f9e:	09 c0       	rjmp	.+18     	; 0xfb2 <__floatsisf+0x12>

00000fa0 <__floatsisf>:
     fa0:	97 fb       	bst	r25, 7
     fa2:	3e f4       	brtc	.+14     	; 0xfb2 <__floatsisf+0x12>
     fa4:	90 95       	com	r25
     fa6:	80 95       	com	r24
     fa8:	70 95       	com	r23
     faa:	61 95       	neg	r22
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	8f 4f       	sbci	r24, 0xFF	; 255
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	99 23       	and	r25, r25
     fb4:	a9 f0       	breq	.+42     	; 0xfe0 <__floatsisf+0x40>
     fb6:	f9 2f       	mov	r31, r25
     fb8:	96 e9       	ldi	r25, 0x96	; 150
     fba:	bb 27       	eor	r27, r27
     fbc:	93 95       	inc	r25
     fbe:	f6 95       	lsr	r31
     fc0:	87 95       	ror	r24
     fc2:	77 95       	ror	r23
     fc4:	67 95       	ror	r22
     fc6:	b7 95       	ror	r27
     fc8:	f1 11       	cpse	r31, r1
     fca:	f8 cf       	rjmp	.-16     	; 0xfbc <__floatsisf+0x1c>
     fcc:	fa f4       	brpl	.+62     	; 0x100c <__floatsisf+0x6c>
     fce:	bb 0f       	add	r27, r27
     fd0:	11 f4       	brne	.+4      	; 0xfd6 <__floatsisf+0x36>
     fd2:	60 ff       	sbrs	r22, 0
     fd4:	1b c0       	rjmp	.+54     	; 0x100c <__floatsisf+0x6c>
     fd6:	6f 5f       	subi	r22, 0xFF	; 255
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	8f 4f       	sbci	r24, 0xFF	; 255
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	16 c0       	rjmp	.+44     	; 0x100c <__floatsisf+0x6c>
     fe0:	88 23       	and	r24, r24
     fe2:	11 f0       	breq	.+4      	; 0xfe8 <__floatsisf+0x48>
     fe4:	96 e9       	ldi	r25, 0x96	; 150
     fe6:	11 c0       	rjmp	.+34     	; 0x100a <__floatsisf+0x6a>
     fe8:	77 23       	and	r23, r23
     fea:	21 f0       	breq	.+8      	; 0xff4 <__floatsisf+0x54>
     fec:	9e e8       	ldi	r25, 0x8E	; 142
     fee:	87 2f       	mov	r24, r23
     ff0:	76 2f       	mov	r23, r22
     ff2:	05 c0       	rjmp	.+10     	; 0xffe <__floatsisf+0x5e>
     ff4:	66 23       	and	r22, r22
     ff6:	71 f0       	breq	.+28     	; 0x1014 <__floatsisf+0x74>
     ff8:	96 e8       	ldi	r25, 0x86	; 134
     ffa:	86 2f       	mov	r24, r22
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	2a f0       	brmi	.+10     	; 0x100c <__floatsisf+0x6c>
    1002:	9a 95       	dec	r25
    1004:	66 0f       	add	r22, r22
    1006:	77 1f       	adc	r23, r23
    1008:	88 1f       	adc	r24, r24
    100a:	da f7       	brpl	.-10     	; 0x1002 <__floatsisf+0x62>
    100c:	88 0f       	add	r24, r24
    100e:	96 95       	lsr	r25
    1010:	87 95       	ror	r24
    1012:	97 f9       	bld	r25, 7
    1014:	08 95       	ret

00001016 <__fp_cmp>:
    1016:	99 0f       	add	r25, r25
    1018:	00 08       	sbc	r0, r0
    101a:	55 0f       	add	r21, r21
    101c:	aa 0b       	sbc	r26, r26
    101e:	e0 e8       	ldi	r30, 0x80	; 128
    1020:	fe ef       	ldi	r31, 0xFE	; 254
    1022:	16 16       	cp	r1, r22
    1024:	17 06       	cpc	r1, r23
    1026:	e8 07       	cpc	r30, r24
    1028:	f9 07       	cpc	r31, r25
    102a:	c0 f0       	brcs	.+48     	; 0x105c <__fp_cmp+0x46>
    102c:	12 16       	cp	r1, r18
    102e:	13 06       	cpc	r1, r19
    1030:	e4 07       	cpc	r30, r20
    1032:	f5 07       	cpc	r31, r21
    1034:	98 f0       	brcs	.+38     	; 0x105c <__fp_cmp+0x46>
    1036:	62 1b       	sub	r22, r18
    1038:	73 0b       	sbc	r23, r19
    103a:	84 0b       	sbc	r24, r20
    103c:	95 0b       	sbc	r25, r21
    103e:	39 f4       	brne	.+14     	; 0x104e <__fp_cmp+0x38>
    1040:	0a 26       	eor	r0, r26
    1042:	61 f0       	breq	.+24     	; 0x105c <__fp_cmp+0x46>
    1044:	23 2b       	or	r18, r19
    1046:	24 2b       	or	r18, r20
    1048:	25 2b       	or	r18, r21
    104a:	21 f4       	brne	.+8      	; 0x1054 <__fp_cmp+0x3e>
    104c:	08 95       	ret
    104e:	0a 26       	eor	r0, r26
    1050:	09 f4       	brne	.+2      	; 0x1054 <__fp_cmp+0x3e>
    1052:	a1 40       	sbci	r26, 0x01	; 1
    1054:	a6 95       	lsr	r26
    1056:	8f ef       	ldi	r24, 0xFF	; 255
    1058:	81 1d       	adc	r24, r1
    105a:	81 1d       	adc	r24, r1
    105c:	08 95       	ret

0000105e <__fp_split3>:
    105e:	57 fd       	sbrc	r21, 7
    1060:	90 58       	subi	r25, 0x80	; 128
    1062:	44 0f       	add	r20, r20
    1064:	55 1f       	adc	r21, r21
    1066:	59 f0       	breq	.+22     	; 0x107e <__fp_splitA+0x10>
    1068:	5f 3f       	cpi	r21, 0xFF	; 255
    106a:	71 f0       	breq	.+28     	; 0x1088 <__fp_splitA+0x1a>
    106c:	47 95       	ror	r20

0000106e <__fp_splitA>:
    106e:	88 0f       	add	r24, r24
    1070:	97 fb       	bst	r25, 7
    1072:	99 1f       	adc	r25, r25
    1074:	61 f0       	breq	.+24     	; 0x108e <__fp_splitA+0x20>
    1076:	9f 3f       	cpi	r25, 0xFF	; 255
    1078:	79 f0       	breq	.+30     	; 0x1098 <__fp_splitA+0x2a>
    107a:	87 95       	ror	r24
    107c:	08 95       	ret
    107e:	12 16       	cp	r1, r18
    1080:	13 06       	cpc	r1, r19
    1082:	14 06       	cpc	r1, r20
    1084:	55 1f       	adc	r21, r21
    1086:	f2 cf       	rjmp	.-28     	; 0x106c <__fp_split3+0xe>
    1088:	46 95       	lsr	r20
    108a:	f1 df       	rcall	.-30     	; 0x106e <__fp_splitA>
    108c:	08 c0       	rjmp	.+16     	; 0x109e <__fp_splitA+0x30>
    108e:	16 16       	cp	r1, r22
    1090:	17 06       	cpc	r1, r23
    1092:	18 06       	cpc	r1, r24
    1094:	99 1f       	adc	r25, r25
    1096:	f1 cf       	rjmp	.-30     	; 0x107a <__fp_splitA+0xc>
    1098:	86 95       	lsr	r24
    109a:	71 05       	cpc	r23, r1
    109c:	61 05       	cpc	r22, r1
    109e:	08 94       	sec
    10a0:	08 95       	ret

000010a2 <__fp_zero>:
    10a2:	e8 94       	clt

000010a4 <__fp_szero>:
    10a4:	bb 27       	eor	r27, r27
    10a6:	66 27       	eor	r22, r22
    10a8:	77 27       	eor	r23, r23
    10aa:	cb 01       	movw	r24, r22
    10ac:	97 f9       	bld	r25, 7
    10ae:	08 95       	ret

000010b0 <__mulsf3>:
    10b0:	0b d0       	rcall	.+22     	; 0x10c8 <__mulsf3x>
    10b2:	78 c0       	rjmp	.+240    	; 0x11a4 <__fp_round>
    10b4:	69 d0       	rcall	.+210    	; 0x1188 <__fp_pscA>
    10b6:	28 f0       	brcs	.+10     	; 0x10c2 <__mulsf3+0x12>
    10b8:	6e d0       	rcall	.+220    	; 0x1196 <__fp_pscB>
    10ba:	18 f0       	brcs	.+6      	; 0x10c2 <__mulsf3+0x12>
    10bc:	95 23       	and	r25, r21
    10be:	09 f0       	breq	.+2      	; 0x10c2 <__mulsf3+0x12>
    10c0:	5a c0       	rjmp	.+180    	; 0x1176 <__fp_inf>
    10c2:	5f c0       	rjmp	.+190    	; 0x1182 <__fp_nan>
    10c4:	11 24       	eor	r1, r1
    10c6:	ee cf       	rjmp	.-36     	; 0x10a4 <__fp_szero>

000010c8 <__mulsf3x>:
    10c8:	ca df       	rcall	.-108    	; 0x105e <__fp_split3>
    10ca:	a0 f3       	brcs	.-24     	; 0x10b4 <__mulsf3+0x4>

000010cc <__mulsf3_pse>:
    10cc:	95 9f       	mul	r25, r21
    10ce:	d1 f3       	breq	.-12     	; 0x10c4 <__mulsf3+0x14>
    10d0:	95 0f       	add	r25, r21
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	55 1f       	adc	r21, r21
    10d6:	62 9f       	mul	r22, r18
    10d8:	f0 01       	movw	r30, r0
    10da:	72 9f       	mul	r23, r18
    10dc:	bb 27       	eor	r27, r27
    10de:	f0 0d       	add	r31, r0
    10e0:	b1 1d       	adc	r27, r1
    10e2:	63 9f       	mul	r22, r19
    10e4:	aa 27       	eor	r26, r26
    10e6:	f0 0d       	add	r31, r0
    10e8:	b1 1d       	adc	r27, r1
    10ea:	aa 1f       	adc	r26, r26
    10ec:	64 9f       	mul	r22, r20
    10ee:	66 27       	eor	r22, r22
    10f0:	b0 0d       	add	r27, r0
    10f2:	a1 1d       	adc	r26, r1
    10f4:	66 1f       	adc	r22, r22
    10f6:	82 9f       	mul	r24, r18
    10f8:	22 27       	eor	r18, r18
    10fa:	b0 0d       	add	r27, r0
    10fc:	a1 1d       	adc	r26, r1
    10fe:	62 1f       	adc	r22, r18
    1100:	73 9f       	mul	r23, r19
    1102:	b0 0d       	add	r27, r0
    1104:	a1 1d       	adc	r26, r1
    1106:	62 1f       	adc	r22, r18
    1108:	83 9f       	mul	r24, r19
    110a:	a0 0d       	add	r26, r0
    110c:	61 1d       	adc	r22, r1
    110e:	22 1f       	adc	r18, r18
    1110:	74 9f       	mul	r23, r20
    1112:	33 27       	eor	r19, r19
    1114:	a0 0d       	add	r26, r0
    1116:	61 1d       	adc	r22, r1
    1118:	23 1f       	adc	r18, r19
    111a:	84 9f       	mul	r24, r20
    111c:	60 0d       	add	r22, r0
    111e:	21 1d       	adc	r18, r1
    1120:	82 2f       	mov	r24, r18
    1122:	76 2f       	mov	r23, r22
    1124:	6a 2f       	mov	r22, r26
    1126:	11 24       	eor	r1, r1
    1128:	9f 57       	subi	r25, 0x7F	; 127
    112a:	50 40       	sbci	r21, 0x00	; 0
    112c:	8a f0       	brmi	.+34     	; 0x1150 <__mulsf3_pse+0x84>
    112e:	e1 f0       	breq	.+56     	; 0x1168 <__mulsf3_pse+0x9c>
    1130:	88 23       	and	r24, r24
    1132:	4a f0       	brmi	.+18     	; 0x1146 <__mulsf3_pse+0x7a>
    1134:	ee 0f       	add	r30, r30
    1136:	ff 1f       	adc	r31, r31
    1138:	bb 1f       	adc	r27, r27
    113a:	66 1f       	adc	r22, r22
    113c:	77 1f       	adc	r23, r23
    113e:	88 1f       	adc	r24, r24
    1140:	91 50       	subi	r25, 0x01	; 1
    1142:	50 40       	sbci	r21, 0x00	; 0
    1144:	a9 f7       	brne	.-22     	; 0x1130 <__mulsf3_pse+0x64>
    1146:	9e 3f       	cpi	r25, 0xFE	; 254
    1148:	51 05       	cpc	r21, r1
    114a:	70 f0       	brcs	.+28     	; 0x1168 <__mulsf3_pse+0x9c>
    114c:	14 c0       	rjmp	.+40     	; 0x1176 <__fp_inf>
    114e:	aa cf       	rjmp	.-172    	; 0x10a4 <__fp_szero>
    1150:	5f 3f       	cpi	r21, 0xFF	; 255
    1152:	ec f3       	brlt	.-6      	; 0x114e <__mulsf3_pse+0x82>
    1154:	98 3e       	cpi	r25, 0xE8	; 232
    1156:	dc f3       	brlt	.-10     	; 0x114e <__mulsf3_pse+0x82>
    1158:	86 95       	lsr	r24
    115a:	77 95       	ror	r23
    115c:	67 95       	ror	r22
    115e:	b7 95       	ror	r27
    1160:	f7 95       	ror	r31
    1162:	e7 95       	ror	r30
    1164:	9f 5f       	subi	r25, 0xFF	; 255
    1166:	c1 f7       	brne	.-16     	; 0x1158 <__mulsf3_pse+0x8c>
    1168:	fe 2b       	or	r31, r30
    116a:	88 0f       	add	r24, r24
    116c:	91 1d       	adc	r25, r1
    116e:	96 95       	lsr	r25
    1170:	87 95       	ror	r24
    1172:	97 f9       	bld	r25, 7
    1174:	08 95       	ret

00001176 <__fp_inf>:
    1176:	97 f9       	bld	r25, 7
    1178:	9f 67       	ori	r25, 0x7F	; 127
    117a:	80 e8       	ldi	r24, 0x80	; 128
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	08 95       	ret

00001182 <__fp_nan>:
    1182:	9f ef       	ldi	r25, 0xFF	; 255
    1184:	80 ec       	ldi	r24, 0xC0	; 192
    1186:	08 95       	ret

00001188 <__fp_pscA>:
    1188:	00 24       	eor	r0, r0
    118a:	0a 94       	dec	r0
    118c:	16 16       	cp	r1, r22
    118e:	17 06       	cpc	r1, r23
    1190:	18 06       	cpc	r1, r24
    1192:	09 06       	cpc	r0, r25
    1194:	08 95       	ret

00001196 <__fp_pscB>:
    1196:	00 24       	eor	r0, r0
    1198:	0a 94       	dec	r0
    119a:	12 16       	cp	r1, r18
    119c:	13 06       	cpc	r1, r19
    119e:	14 06       	cpc	r1, r20
    11a0:	05 06       	cpc	r0, r21
    11a2:	08 95       	ret

000011a4 <__fp_round>:
    11a4:	09 2e       	mov	r0, r25
    11a6:	03 94       	inc	r0
    11a8:	00 0c       	add	r0, r0
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <__fp_round+0xc>
    11ac:	88 23       	and	r24, r24
    11ae:	52 f0       	brmi	.+20     	; 0x11c4 <__fp_round+0x20>
    11b0:	bb 0f       	add	r27, r27
    11b2:	40 f4       	brcc	.+16     	; 0x11c4 <__fp_round+0x20>
    11b4:	bf 2b       	or	r27, r31
    11b6:	11 f4       	brne	.+4      	; 0x11bc <__fp_round+0x18>
    11b8:	60 ff       	sbrs	r22, 0
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <__fp_round+0x20>
    11bc:	6f 5f       	subi	r22, 0xFF	; 255
    11be:	7f 4f       	sbci	r23, 0xFF	; 255
    11c0:	8f 4f       	sbci	r24, 0xFF	; 255
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	08 95       	ret

000011c6 <__udivmodhi4>:
    11c6:	aa 1b       	sub	r26, r26
    11c8:	bb 1b       	sub	r27, r27
    11ca:	51 e1       	ldi	r21, 0x11	; 17
    11cc:	07 c0       	rjmp	.+14     	; 0x11dc <__udivmodhi4_ep>

000011ce <__udivmodhi4_loop>:
    11ce:	aa 1f       	adc	r26, r26
    11d0:	bb 1f       	adc	r27, r27
    11d2:	a6 17       	cp	r26, r22
    11d4:	b7 07       	cpc	r27, r23
    11d6:	10 f0       	brcs	.+4      	; 0x11dc <__udivmodhi4_ep>
    11d8:	a6 1b       	sub	r26, r22
    11da:	b7 0b       	sbc	r27, r23

000011dc <__udivmodhi4_ep>:
    11dc:	88 1f       	adc	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	5a 95       	dec	r21
    11e2:	a9 f7       	brne	.-22     	; 0x11ce <__udivmodhi4_loop>
    11e4:	80 95       	com	r24
    11e6:	90 95       	com	r25
    11e8:	bc 01       	movw	r22, r24
    11ea:	cd 01       	movw	r24, r26
    11ec:	08 95       	ret

000011ee <__udivmodsi4>:
    11ee:	a1 e2       	ldi	r26, 0x21	; 33
    11f0:	1a 2e       	mov	r1, r26
    11f2:	aa 1b       	sub	r26, r26
    11f4:	bb 1b       	sub	r27, r27
    11f6:	fd 01       	movw	r30, r26
    11f8:	0d c0       	rjmp	.+26     	; 0x1214 <__udivmodsi4_ep>

000011fa <__udivmodsi4_loop>:
    11fa:	aa 1f       	adc	r26, r26
    11fc:	bb 1f       	adc	r27, r27
    11fe:	ee 1f       	adc	r30, r30
    1200:	ff 1f       	adc	r31, r31
    1202:	a2 17       	cp	r26, r18
    1204:	b3 07       	cpc	r27, r19
    1206:	e4 07       	cpc	r30, r20
    1208:	f5 07       	cpc	r31, r21
    120a:	20 f0       	brcs	.+8      	; 0x1214 <__udivmodsi4_ep>
    120c:	a2 1b       	sub	r26, r18
    120e:	b3 0b       	sbc	r27, r19
    1210:	e4 0b       	sbc	r30, r20
    1212:	f5 0b       	sbc	r31, r21

00001214 <__udivmodsi4_ep>:
    1214:	66 1f       	adc	r22, r22
    1216:	77 1f       	adc	r23, r23
    1218:	88 1f       	adc	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	1a 94       	dec	r1
    121e:	69 f7       	brne	.-38     	; 0x11fa <__udivmodsi4_loop>
    1220:	60 95       	com	r22
    1222:	70 95       	com	r23
    1224:	80 95       	com	r24
    1226:	90 95       	com	r25
    1228:	9b 01       	movw	r18, r22
    122a:	ac 01       	movw	r20, r24
    122c:	bd 01       	movw	r22, r26
    122e:	cf 01       	movw	r24, r30
    1230:	08 95       	ret

00001232 <__divmodsi4>:
    1232:	05 2e       	mov	r0, r21
    1234:	97 fb       	bst	r25, 7
    1236:	1e f4       	brtc	.+6      	; 0x123e <__divmodsi4+0xc>
    1238:	00 94       	com	r0
    123a:	0e 94 30 09 	call	0x1260	; 0x1260 <__negsi2>
    123e:	57 fd       	sbrc	r21, 7
    1240:	07 d0       	rcall	.+14     	; 0x1250 <__divmodsi4_neg2>
    1242:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__udivmodsi4>
    1246:	07 fc       	sbrc	r0, 7
    1248:	03 d0       	rcall	.+6      	; 0x1250 <__divmodsi4_neg2>
    124a:	4e f4       	brtc	.+18     	; 0x125e <__divmodsi4_exit>
    124c:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__negsi2>

00001250 <__divmodsi4_neg2>:
    1250:	50 95       	com	r21
    1252:	40 95       	com	r20
    1254:	30 95       	com	r19
    1256:	21 95       	neg	r18
    1258:	3f 4f       	sbci	r19, 0xFF	; 255
    125a:	4f 4f       	sbci	r20, 0xFF	; 255
    125c:	5f 4f       	sbci	r21, 0xFF	; 255

0000125e <__divmodsi4_exit>:
    125e:	08 95       	ret

00001260 <__negsi2>:
    1260:	90 95       	com	r25
    1262:	80 95       	com	r24
    1264:	70 95       	com	r23
    1266:	61 95       	neg	r22
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
    126a:	8f 4f       	sbci	r24, 0xFF	; 255
    126c:	9f 4f       	sbci	r25, 0xFF	; 255
    126e:	08 95       	ret

00001270 <__tablejump2__>:
    1270:	ee 0f       	add	r30, r30
    1272:	ff 1f       	adc	r31, r31

00001274 <__tablejump__>:
    1274:	05 90       	lpm	r0, Z+
    1276:	f4 91       	lpm	r31, Z
    1278:	e0 2d       	mov	r30, r0
    127a:	09 94       	ijmp

0000127c <memset>:
    127c:	dc 01       	movw	r26, r24
    127e:	01 c0       	rjmp	.+2      	; 0x1282 <memset+0x6>
    1280:	6d 93       	st	X+, r22
    1282:	41 50       	subi	r20, 0x01	; 1
    1284:	50 40       	sbci	r21, 0x00	; 0
    1286:	e0 f7       	brcc	.-8      	; 0x1280 <memset+0x4>
    1288:	08 95       	ret

0000128a <_exit>:
    128a:	f8 94       	cli

0000128c <__stop_program>:
    128c:	ff cf       	rjmp	.-2      	; 0x128c <__stop_program>
